/**
 * MX Platform API
 * The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AccountNumberResponse
 */
export interface AccountNumberResponse {
    /**
     *
     * @type {string}
     * @memberof AccountNumberResponse
     */
    'account_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof AccountNumberResponse
     */
    'account_number'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountNumberResponse
     */
    'guid'?: string;
    /**
     *
     * @type {string}
     * @memberof AccountNumberResponse
     */
    'institution_number'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountNumberResponse
     */
    'member_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof AccountNumberResponse
     */
    'routing_number'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountNumberResponse
     */
    'transit_number'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountNumberResponse
     */
    'user_guid'?: string;
}
/**
 *
 * @export
 * @interface AccountNumbersResponseBody
 */
export interface AccountNumbersResponseBody {
    /**
     *
     * @type {Array<AccountNumberResponse>}
     * @memberof AccountNumbersResponseBody
     */
    'account_numbers'?: Array<AccountNumberResponse>;
    /**
     *
     * @type {PaginationResponse}
     * @memberof AccountNumbersResponseBody
     */
    'pagination'?: PaginationResponse;
}
/**
 *
 * @export
 * @interface AccountOwnerResponse
 */
export interface AccountOwnerResponse {
    /**
     *
     * @type {string}
     * @memberof AccountOwnerResponse
     */
    'account_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof AccountOwnerResponse
     */
    'address'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountOwnerResponse
     */
    'city'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountOwnerResponse
     */
    'country'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountOwnerResponse
     */
    'email'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountOwnerResponse
     */
    'guid'?: string;
    /**
     *
     * @type {string}
     * @memberof AccountOwnerResponse
     */
    'member_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof AccountOwnerResponse
     */
    'owner_name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountOwnerResponse
     */
    'phone'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountOwnerResponse
     */
    'postal_code'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountOwnerResponse
     */
    'state'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountOwnerResponse
     */
    'user_guid'?: string;
}
/**
 *
 * @export
 * @interface AccountOwnersResponseBody
 */
export interface AccountOwnersResponseBody {
    /**
     *
     * @type {Array<AccountOwnerResponse>}
     * @memberof AccountOwnersResponseBody
     */
    'account_owners'?: Array<AccountOwnerResponse>;
    /**
     *
     * @type {PaginationResponse}
     * @memberof AccountOwnersResponseBody
     */
    'pagination'?: PaginationResponse;
}
/**
 *
 * @export
 * @interface AccountResponse
 */
export interface AccountResponse {
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'account_number'?: string | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'apr'?: number | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'apy'?: number | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'available_balance'?: number | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'available_credit'?: number | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'balance'?: number | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'cash_balance'?: number | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'cash_surrender_value'?: number | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'created_at'?: string | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'credit_limit'?: number | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'currency_code'?: string | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'day_payment_is_due'?: number | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'death_benefit'?: number | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'guid'?: string;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'holdings_value'?: number | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'imported_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'institution_code'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'insured_name'?: string | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'interest_rate'?: number | null;
    /**
     *
     * @type {boolean}
     * @memberof AccountResponse
     */
    'is_closed'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof AccountResponse
     */
    'is_hidden'?: boolean | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'last_payment'?: number | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'last_payment_at'?: string | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'loan_amount'?: number | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'matures_on'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'member_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'member_id'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof AccountResponse
     */
    'member_is_managed_by_user'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'metadata'?: string | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'minimum_balance'?: number | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'minimum_payment'?: number | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'nickname'?: string | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'original_balance'?: number | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'pay_out_amount'?: number | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'payment_due_at'?: string | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'payoff_balance'?: number | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'premium_amount'?: number | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'routing_number'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'started_on'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'subtype'?: string | null;
    /**
     *
     * @type {number}
     * @memberof AccountResponse
     */
    'total_account_value'?: number | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'updated_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'user_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof AccountResponse
     */
    'user_id'?: string | null;
}
/**
 *
 * @export
 * @interface AccountResponseBody
 */
export interface AccountResponseBody {
    /**
     *
     * @type {AccountResponse}
     * @memberof AccountResponseBody
     */
    'account'?: AccountResponse;
}
/**
 *
 * @export
 * @interface AccountUpdateRequest
 */
export interface AccountUpdateRequest {
    /**
     *
     * @type {boolean}
     * @memberof AccountUpdateRequest
     */
    'is_hidden'?: boolean;
}
/**
 *
 * @export
 * @interface AccountUpdateRequestBody
 */
export interface AccountUpdateRequestBody {
    /**
     *
     * @type {AccountUpdateRequest}
     * @memberof AccountUpdateRequestBody
     */
    'account'?: AccountUpdateRequest;
}
/**
 *
 * @export
 * @interface AccountsResponseBody
 */
export interface AccountsResponseBody {
    /**
     *
     * @type {Array<AccountResponse>}
     * @memberof AccountsResponseBody
     */
    'accounts'?: Array<AccountResponse>;
    /**
     *
     * @type {PaginationResponse}
     * @memberof AccountsResponseBody
     */
    'pagination'?: PaginationResponse;
}
/**
 *
 * @export
 * @interface CategoriesResponseBody
 */
export interface CategoriesResponseBody {
    /**
     *
     * @type {Array<CategoryResponse>}
     * @memberof CategoriesResponseBody
     */
    'categories'?: Array<CategoryResponse>;
    /**
     *
     * @type {PaginationResponse}
     * @memberof CategoriesResponseBody
     */
    'pagination'?: PaginationResponse;
}
/**
 *
 * @export
 * @interface CategoryCreateRequest
 */
export interface CategoryCreateRequest {
    /**
     *
     * @type {string}
     * @memberof CategoryCreateRequest
     */
    'metadata'?: string;
    /**
     *
     * @type {string}
     * @memberof CategoryCreateRequest
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof CategoryCreateRequest
     */
    'parent_guid'?: string;
}
/**
 *
 * @export
 * @interface CategoryCreateRequestBody
 */
export interface CategoryCreateRequestBody {
    /**
     *
     * @type {CategoryCreateRequest}
     * @memberof CategoryCreateRequestBody
     */
    'category'?: CategoryCreateRequest;
}
/**
 *
 * @export
 * @interface CategoryResponse
 */
export interface CategoryResponse {
    /**
     *
     * @type {string}
     * @memberof CategoryResponse
     */
    'created_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CategoryResponse
     */
    'guid'?: string;
    /**
     *
     * @type {boolean}
     * @memberof CategoryResponse
     */
    'is_default'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof CategoryResponse
     */
    'is_income'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof CategoryResponse
     */
    'metadata'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CategoryResponse
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CategoryResponse
     */
    'parent_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof CategoryResponse
     */
    'updated_at'?: string | null;
}
/**
 *
 * @export
 * @interface CategoryResponseBody
 */
export interface CategoryResponseBody {
    /**
     *
     * @type {CategoryResponse}
     * @memberof CategoryResponseBody
     */
    'category'?: CategoryResponse;
}
/**
 *
 * @export
 * @interface CategoryUpdateRequest
 */
export interface CategoryUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof CategoryUpdateRequest
     */
    'metadata'?: string;
    /**
     *
     * @type {string}
     * @memberof CategoryUpdateRequest
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface CategoryUpdateRequestBody
 */
export interface CategoryUpdateRequestBody {
    /**
     *
     * @type {CategoryUpdateRequest}
     * @memberof CategoryUpdateRequestBody
     */
    'category'?: CategoryUpdateRequest;
}
/**
 *
 * @export
 * @interface ChallengeResponse
 */
export interface ChallengeResponse {
    /**
     *
     * @type {string}
     * @memberof ChallengeResponse
     */
    'field_name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ChallengeResponse
     */
    'guid'?: string;
    /**
     *
     * @type {string}
     * @memberof ChallengeResponse
     */
    'image_data'?: string | null;
    /**
     *
     * @type {Array<ImageOptionResponse>}
     * @memberof ChallengeResponse
     */
    'image_options'?: Array<ImageOptionResponse>;
    /**
     *
     * @type {string}
     * @memberof ChallengeResponse
     */
    'label'?: string | null;
    /**
     *
     * @type {Array<OptionResponse>}
     * @memberof ChallengeResponse
     */
    'options'?: Array<OptionResponse>;
    /**
     *
     * @type {string}
     * @memberof ChallengeResponse
     */
    'type'?: string | null;
}
/**
 *
 * @export
 * @interface ChallengesResponseBody
 */
export interface ChallengesResponseBody {
    /**
     *
     * @type {Array<ChallengeResponse>}
     * @memberof ChallengesResponseBody
     */
    'challenges'?: Array<ChallengeResponse>;
    /**
     *
     * @type {PaginationResponse}
     * @memberof ChallengesResponseBody
     */
    'pagination'?: PaginationResponse;
}
/**
 *
 * @export
 * @interface ConnectWidgetRequest
 */
export interface ConnectWidgetRequest {
    /**
     *
     * @type {string}
     * @memberof ConnectWidgetRequest
     */
    'color_scheme'?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectWidgetRequest
     */
    'current_institution_code'?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectWidgetRequest
     */
    'current_member_guid'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ConnectWidgetRequest
     */
    'disable_institution_search'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ConnectWidgetRequest
     */
    'include_transactions'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ConnectWidgetRequest
     */
    'is_mobile_webview'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ConnectWidgetRequest
     */
    'mode'?: string;
    /**
     *
     * @type {number}
     * @memberof ConnectWidgetRequest
     */
    'ui_message_version'?: number;
    /**
     *
     * @type {string}
     * @memberof ConnectWidgetRequest
     */
    'ui_message_webview_url_scheme'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ConnectWidgetRequest
     */
    'update_credentials'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ConnectWidgetRequest
     */
    'wait_for_full_aggregation'?: boolean;
}
/**
 *
 * @export
 * @interface ConnectWidgetRequestBody
 */
export interface ConnectWidgetRequestBody {
    /**
     *
     * @type {ConnectWidgetRequest}
     * @memberof ConnectWidgetRequestBody
     */
    'config'?: ConnectWidgetRequest;
}
/**
 *
 * @export
 * @interface ConnectWidgetResponse
 */
export interface ConnectWidgetResponse {
    /**
     *
     * @type {string}
     * @memberof ConnectWidgetResponse
     */
    'connect_widget_url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ConnectWidgetResponse
     */
    'guid'?: string;
}
/**
 *
 * @export
 * @interface ConnectWidgetResponseBody
 */
export interface ConnectWidgetResponseBody {
    /**
     *
     * @type {ConnectWidgetResponse}
     * @memberof ConnectWidgetResponseBody
     */
    'user'?: ConnectWidgetResponse;
}
/**
 *
 * @export
 * @interface CredentialRequest
 */
export interface CredentialRequest {
    /**
     *
     * @type {string}
     * @memberof CredentialRequest
     */
    'guid'?: string;
    /**
     *
     * @type {string}
     * @memberof CredentialRequest
     */
    'value'?: string | null;
}
/**
 *
 * @export
 * @interface CredentialResponse
 */
export interface CredentialResponse {
    /**
     *
     * @type {number}
     * @memberof CredentialResponse
     */
    'display_order'?: number | null;
    /**
     *
     * @type {string}
     * @memberof CredentialResponse
     */
    'field_name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CredentialResponse
     */
    'field_type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CredentialResponse
     */
    'guid'?: string;
    /**
     *
     * @type {string}
     * @memberof CredentialResponse
     */
    'label'?: string;
}
/**
 *
 * @export
 * @interface CredentialsResponseBody
 */
export interface CredentialsResponseBody {
    /**
     *
     * @type {Array<CredentialResponse>}
     * @memberof CredentialsResponseBody
     */
    'credentials'?: Array<CredentialResponse>;
    /**
     *
     * @type {PaginationResponse}
     * @memberof CredentialsResponseBody
     */
    'pagination'?: PaginationResponse;
}
/**
 *
 * @export
 * @interface EnhanceTransactionResponse
 */
export interface EnhanceTransactionResponse {
    /**
     *
     * @type {number}
     * @memberof EnhanceTransactionResponse
     */
    'amount'?: number | null;
    /**
     *
     * @type {number}
     * @memberof EnhanceTransactionResponse
     */
    'categorized_by'?: number | null;
    /**
     *
     * @type {string}
     * @memberof EnhanceTransactionResponse
     */
    'category'?: string | null;
    /**
     *
     * @type {string}
     * @memberof EnhanceTransactionResponse
     */
    'category_guid'?: string | null;
    /**
     *
     * @type {number}
     * @memberof EnhanceTransactionResponse
     */
    'described_by'?: number | null;
    /**
     *
     * @type {string}
     * @memberof EnhanceTransactionResponse
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof EnhanceTransactionResponse
     */
    'extended_transaction_type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof EnhanceTransactionResponse
     */
    'id'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof EnhanceTransactionResponse
     */
    'is_bill_pay'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof EnhanceTransactionResponse
     */
    'is_direct_deposit'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof EnhanceTransactionResponse
     */
    'is_expense'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof EnhanceTransactionResponse
     */
    'is_fee'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof EnhanceTransactionResponse
     */
    'is_income'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof EnhanceTransactionResponse
     */
    'is_international'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof EnhanceTransactionResponse
     */
    'is_overdraft_fee'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof EnhanceTransactionResponse
     */
    'is_payroll_advance'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof EnhanceTransactionResponse
     */
    'is_subscription'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof EnhanceTransactionResponse
     */
    'memo'?: string | null;
    /**
     *
     * @type {number}
     * @memberof EnhanceTransactionResponse
     */
    'merchant_category_code'?: number | null;
    /**
     *
     * @type {string}
     * @memberof EnhanceTransactionResponse
     */
    'merchant_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof EnhanceTransactionResponse
     */
    'merchant_location_guid'?: string | null;
    /**
     *
     * @type {string}
     * @memberof EnhanceTransactionResponse
     */
    'original_description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof EnhanceTransactionResponse
     */
    'type'?: string | null;
}
/**
 *
 * @export
 * @interface EnhanceTransactionsRequest
 */
export interface EnhanceTransactionsRequest {
    /**
     *
     * @type {number}
     * @memberof EnhanceTransactionsRequest
     */
    'amount'?: number;
    /**
     *
     * @type {string}
     * @memberof EnhanceTransactionsRequest
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof EnhanceTransactionsRequest
     */
    'extended_transaction_type'?: string;
    /**
     *
     * @type {string}
     * @memberof EnhanceTransactionsRequest
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof EnhanceTransactionsRequest
     */
    'memo'?: string;
    /**
     *
     * @type {number}
     * @memberof EnhanceTransactionsRequest
     */
    'merchant_category_code'?: number;
    /**
     *
     * @type {string}
     * @memberof EnhanceTransactionsRequest
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface EnhanceTransactionsRequestBody
 */
export interface EnhanceTransactionsRequestBody {
    /**
     *
     * @type {Array<EnhanceTransactionsRequest>}
     * @memberof EnhanceTransactionsRequestBody
     */
    'transactions'?: Array<EnhanceTransactionsRequest>;
}
/**
 *
 * @export
 * @interface EnhanceTransactionsResponseBody
 */
export interface EnhanceTransactionsResponseBody {
    /**
     *
     * @type {Array<EnhanceTransactionResponse>}
     * @memberof EnhanceTransactionsResponseBody
     */
    'transactions'?: Array<EnhanceTransactionResponse>;
}
/**
 *
 * @export
 * @interface HoldingResponse
 */
export interface HoldingResponse {
    /**
     *
     * @type {string}
     * @memberof HoldingResponse
     */
    'account_guid'?: string;
    /**
     *
     * @type {number}
     * @memberof HoldingResponse
     */
    'cost_basis'?: number | null;
    /**
     *
     * @type {string}
     * @memberof HoldingResponse
     */
    'created_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof HoldingResponse
     */
    'currency_code'?: string | null;
    /**
     *
     * @type {string}
     * @memberof HoldingResponse
     */
    'cusip'?: string | null;
    /**
     *
     * @type {number}
     * @memberof HoldingResponse
     */
    'daily_change'?: number | null;
    /**
     *
     * @type {string}
     * @memberof HoldingResponse
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof HoldingResponse
     */
    'guid'?: string;
    /**
     *
     * @type {string}
     * @memberof HoldingResponse
     */
    'holding_type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof HoldingResponse
     */
    'id'?: string | null;
    /**
     *
     * @type {number}
     * @memberof HoldingResponse
     */
    'market_value'?: number | null;
    /**
     *
     * @type {string}
     * @memberof HoldingResponse
     */
    'member_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof HoldingResponse
     */
    'metadata'?: string | null;
    /**
     *
     * @type {number}
     * @memberof HoldingResponse
     */
    'purchase_price'?: number | null;
    /**
     *
     * @type {number}
     * @memberof HoldingResponse
     */
    'shares'?: number | null;
    /**
     *
     * @type {string}
     * @memberof HoldingResponse
     */
    'symbol'?: string | null;
    /**
     *
     * @type {string}
     * @memberof HoldingResponse
     */
    'updated_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof HoldingResponse
     */
    'user_guid'?: string;
}
/**
 *
 * @export
 * @interface HoldingResponseBody
 */
export interface HoldingResponseBody {
    /**
     *
     * @type {HoldingResponse}
     * @memberof HoldingResponseBody
     */
    'holding'?: HoldingResponse;
}
/**
 *
 * @export
 * @interface HoldingsResponseBody
 */
export interface HoldingsResponseBody {
    /**
     *
     * @type {Array<HoldingResponse>}
     * @memberof HoldingsResponseBody
     */
    'holdings'?: Array<HoldingResponse>;
    /**
     *
     * @type {PaginationResponse}
     * @memberof HoldingsResponseBody
     */
    'pagination'?: PaginationResponse;
}
/**
 *
 * @export
 * @interface ImageOptionResponse
 */
export interface ImageOptionResponse {
    /**
     *
     * @type {string}
     * @memberof ImageOptionResponse
     */
    'data_uri'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ImageOptionResponse
     */
    'label'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ImageOptionResponse
     */
    'value'?: string | null;
}
/**
 *
 * @export
 * @interface InstitutionResponse
 */
export interface InstitutionResponse {
    /**
     *
     * @type {string}
     * @memberof InstitutionResponse
     */
    'code'?: string | null;
    /**
     *
     * @type {string}
     * @memberof InstitutionResponse
     */
    'medium_logo_url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof InstitutionResponse
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof InstitutionResponse
     */
    'small_logo_url'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof InstitutionResponse
     */
    'supports_account_identification'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof InstitutionResponse
     */
    'supports_account_statement'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof InstitutionResponse
     */
    'supports_account_verification'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof InstitutionResponse
     */
    'supports_oauth'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof InstitutionResponse
     */
    'supports_transaction_history'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof InstitutionResponse
     */
    'url'?: string | null;
}
/**
 *
 * @export
 * @interface InstitutionResponseBody
 */
export interface InstitutionResponseBody {
    /**
     *
     * @type {InstitutionResponse}
     * @memberof InstitutionResponseBody
     */
    'institution'?: InstitutionResponse;
}
/**
 *
 * @export
 * @interface InstitutionsResponseBody
 */
export interface InstitutionsResponseBody {
    /**
     *
     * @type {Array<InstitutionResponse>}
     * @memberof InstitutionsResponseBody
     */
    'institutions'?: Array<InstitutionResponse>;
    /**
     *
     * @type {PaginationResponse}
     * @memberof InstitutionsResponseBody
     */
    'pagination'?: PaginationResponse;
}
/**
 *
 * @export
 * @interface ManagedAccountCreateRequest
 */
export interface ManagedAccountCreateRequest {
    /**
     *
     * @type {string}
     * @memberof ManagedAccountCreateRequest
     */
    'account_number'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountCreateRequest
     */
    'apr'?: number;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountCreateRequest
     */
    'apy'?: number;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountCreateRequest
     */
    'available_balance'?: number;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountCreateRequest
     */
    'available_credit'?: number;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountCreateRequest
     */
    'balance': number;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountCreateRequest
     */
    'cash_surrender_value'?: number;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountCreateRequest
     */
    'credit_limit'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountCreateRequest
     */
    'currency_code'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountCreateRequest
     */
    'day_payment_is_due'?: number;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountCreateRequest
     */
    'death_benefit'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountCreateRequest
     */
    'id'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountCreateRequest
     */
    'interest_rate'?: number;
    /**
     *
     * @type {boolean}
     * @memberof ManagedAccountCreateRequest
     */
    'is_closed'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ManagedAccountCreateRequest
     */
    'is_hidden'?: boolean;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountCreateRequest
     */
    'last_payment'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountCreateRequest
     */
    'last_payment_at'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountCreateRequest
     */
    'loan_amount'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountCreateRequest
     */
    'matures_on'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountCreateRequest
     */
    'metadata'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountCreateRequest
     */
    'minimum_balance'?: number;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountCreateRequest
     */
    'minimum_payment'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountCreateRequest
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountCreateRequest
     */
    'nickname'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountCreateRequest
     */
    'original_balance'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountCreateRequest
     */
    'payment_due_at'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountCreateRequest
     */
    'payoff_balance'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountCreateRequest
     */
    'routing_number'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountCreateRequest
     */
    'started_on'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountCreateRequest
     */
    'subtype'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountCreateRequest
     */
    'type': string;
}
/**
 *
 * @export
 * @interface ManagedAccountCreateRequestBody
 */
export interface ManagedAccountCreateRequestBody {
    /**
     *
     * @type {ManagedAccountCreateRequest}
     * @memberof ManagedAccountCreateRequestBody
     */
    'account'?: ManagedAccountCreateRequest;
}
/**
 *
 * @export
 * @interface ManagedAccountUpdateRequest
 */
export interface ManagedAccountUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof ManagedAccountUpdateRequest
     */
    'account_number'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountUpdateRequest
     */
    'apr'?: number;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountUpdateRequest
     */
    'apy'?: number;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountUpdateRequest
     */
    'available_balance'?: number;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountUpdateRequest
     */
    'available_credit'?: number;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountUpdateRequest
     */
    'balance'?: number;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountUpdateRequest
     */
    'cash_surrender_value'?: number;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountUpdateRequest
     */
    'credit_limit'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountUpdateRequest
     */
    'currency_code'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountUpdateRequest
     */
    'day_payment_is_due'?: number;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountUpdateRequest
     */
    'death_benefit'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountUpdateRequest
     */
    'id'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountUpdateRequest
     */
    'interest_rate'?: number;
    /**
     *
     * @type {boolean}
     * @memberof ManagedAccountUpdateRequest
     */
    'is_closed'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ManagedAccountUpdateRequest
     */
    'is_hidden'?: boolean;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountUpdateRequest
     */
    'last_payment'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountUpdateRequest
     */
    'last_payment_at'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountUpdateRequest
     */
    'loan_amount'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountUpdateRequest
     */
    'matures_on'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountUpdateRequest
     */
    'metadata'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountUpdateRequest
     */
    'minimum_balance'?: number;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountUpdateRequest
     */
    'minimum_payment'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountUpdateRequest
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountUpdateRequest
     */
    'nickname'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountUpdateRequest
     */
    'original_balance'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountUpdateRequest
     */
    'payment_due_at'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedAccountUpdateRequest
     */
    'payoff_balance'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountUpdateRequest
     */
    'routing_number'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountUpdateRequest
     */
    'started_on'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountUpdateRequest
     */
    'subtype'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedAccountUpdateRequest
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface ManagedAccountUpdateRequestBody
 */
export interface ManagedAccountUpdateRequestBody {
    /**
     *
     * @type {ManagedAccountUpdateRequest}
     * @memberof ManagedAccountUpdateRequestBody
     */
    'account'?: ManagedAccountUpdateRequest;
}
/**
 *
 * @export
 * @interface ManagedMemberCreateRequest
 */
export interface ManagedMemberCreateRequest {
    /**
     *
     * @type {string}
     * @memberof ManagedMemberCreateRequest
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedMemberCreateRequest
     */
    'institution_code': string;
    /**
     *
     * @type {string}
     * @memberof ManagedMemberCreateRequest
     */
    'metadata'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedMemberCreateRequest
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface ManagedMemberCreateRequestBody
 */
export interface ManagedMemberCreateRequestBody {
    /**
     *
     * @type {ManagedMemberCreateRequest}
     * @memberof ManagedMemberCreateRequestBody
     */
    'member'?: ManagedMemberCreateRequest;
}
/**
 *
 * @export
 * @interface ManagedMemberUpdateRequest
 */
export interface ManagedMemberUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof ManagedMemberUpdateRequest
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedMemberUpdateRequest
     */
    'metadata'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedMemberUpdateRequest
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface ManagedMemberUpdateRequestBody
 */
export interface ManagedMemberUpdateRequestBody {
    /**
     *
     * @type {ManagedMemberUpdateRequest}
     * @memberof ManagedMemberUpdateRequestBody
     */
    'member'?: ManagedMemberUpdateRequest;
}
/**
 *
 * @export
 * @interface ManagedTransactionCreateRequest
 */
export interface ManagedTransactionCreateRequest {
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionCreateRequest
     */
    'amount': string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionCreateRequest
     */
    'category'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionCreateRequest
     */
    'check_number_string'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionCreateRequest
     */
    'currency_code'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionCreateRequest
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionCreateRequest
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ManagedTransactionCreateRequest
     */
    'is_international'?: boolean;
    /**
     *
     * @type {number}
     * @memberof ManagedTransactionCreateRequest
     */
    'latitude'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionCreateRequest
     */
    'localized_description'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionCreateRequest
     */
    'localized_memo'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedTransactionCreateRequest
     */
    'longitude'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionCreateRequest
     */
    'memo'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedTransactionCreateRequest
     */
    'merchant_category_code'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionCreateRequest
     */
    'merchant_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionCreateRequest
     */
    'merchant_location_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionCreateRequest
     */
    'metadata'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionCreateRequest
     */
    'posted_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionCreateRequest
     */
    'status': string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionCreateRequest
     */
    'transacted_at': string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionCreateRequest
     */
    'type': string;
}
/**
 *
 * @export
 * @interface ManagedTransactionCreateRequestBody
 */
export interface ManagedTransactionCreateRequestBody {
    /**
     *
     * @type {ManagedTransactionCreateRequest}
     * @memberof ManagedTransactionCreateRequestBody
     */
    'transaction'?: ManagedTransactionCreateRequest;
}
/**
 *
 * @export
 * @interface ManagedTransactionUpdateRequest
 */
export interface ManagedTransactionUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionUpdateRequest
     */
    'amount'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionUpdateRequest
     */
    'category'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionUpdateRequest
     */
    'check_number_string'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionUpdateRequest
     */
    'currency_code'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionUpdateRequest
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionUpdateRequest
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ManagedTransactionUpdateRequest
     */
    'is_international'?: boolean;
    /**
     *
     * @type {number}
     * @memberof ManagedTransactionUpdateRequest
     */
    'latitude'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionUpdateRequest
     */
    'localized_description'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionUpdateRequest
     */
    'localized_memo'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedTransactionUpdateRequest
     */
    'longitude'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionUpdateRequest
     */
    'memo'?: string;
    /**
     *
     * @type {number}
     * @memberof ManagedTransactionUpdateRequest
     */
    'merchant_category_code'?: number;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionUpdateRequest
     */
    'merchant_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionUpdateRequest
     */
    'merchant_location_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionUpdateRequest
     */
    'metadata'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionUpdateRequest
     */
    'posted_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionUpdateRequest
     */
    'status'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionUpdateRequest
     */
    'transacted_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ManagedTransactionUpdateRequest
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface ManagedTransactionUpdateRequestBody
 */
export interface ManagedTransactionUpdateRequestBody {
    /**
     *
     * @type {ManagedTransactionUpdateRequest}
     * @memberof ManagedTransactionUpdateRequestBody
     */
    'transaction'?: ManagedTransactionUpdateRequest;
}
/**
 *
 * @export
 * @interface MemberCreateRequest
 */
export interface MemberCreateRequest {
    /**
     *
     * @type {boolean}
     * @memberof MemberCreateRequest
     */
    'background_aggregation_is_disabled'?: boolean;
    /**
     *
     * @type {Array<CredentialRequest>}
     * @memberof MemberCreateRequest
     */
    'credentials': Array<CredentialRequest>;
    /**
     *
     * @type {string}
     * @memberof MemberCreateRequest
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberCreateRequest
     */
    'institution_code': string;
    /**
     *
     * @type {boolean}
     * @memberof MemberCreateRequest
     */
    'is_oauth'?: boolean;
    /**
     *
     * @type {string}
     * @memberof MemberCreateRequest
     */
    'metadata'?: string;
    /**
     *
     * @type {boolean}
     * @memberof MemberCreateRequest
     */
    'skip_aggregation'?: boolean;
}
/**
 *
 * @export
 * @interface MemberCreateRequestBody
 */
export interface MemberCreateRequestBody {
    /**
     *
     * @type {MemberCreateRequest}
     * @memberof MemberCreateRequestBody
     */
    'member'?: MemberCreateRequest;
    /**
     *
     * @type {string}
     * @memberof MemberCreateRequestBody
     */
    'referral_source'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberCreateRequestBody
     */
    'ui_message_webview_url_scheme'?: string;
}
/**
 *
 * @export
 * @interface MemberResponse
 */
export interface MemberResponse {
    /**
     *
     * @type {string}
     * @memberof MemberResponse
     */
    'aggregated_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MemberResponse
     */
    'connection_status'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MemberResponse
     */
    'guid'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberResponse
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MemberResponse
     */
    'institution_code'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof MemberResponse
     */
    'is_being_aggregated'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof MemberResponse
     */
    'is_managed_by_user'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof MemberResponse
     */
    'is_oauth'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof MemberResponse
     */
    'metadata'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MemberResponse
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MemberResponse
     */
    'oauth_window_uri'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MemberResponse
     */
    'successfully_aggregated_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MemberResponse
     */
    'user_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberResponse
     */
    'user_id'?: string | null;
}
/**
 *
 * @export
 * @interface MemberResponseBody
 */
export interface MemberResponseBody {
    /**
     *
     * @type {MemberResponse}
     * @memberof MemberResponseBody
     */
    'member'?: MemberResponse;
}
/**
 *
 * @export
 * @interface MemberResumeRequest
 */
export interface MemberResumeRequest {
    /**
     *
     * @type {Array<CredentialRequest>}
     * @memberof MemberResumeRequest
     */
    'challenges'?: Array<CredentialRequest>;
}
/**
 *
 * @export
 * @interface MemberResumeRequestBody
 */
export interface MemberResumeRequestBody {
    /**
     *
     * @type {MemberResumeRequest}
     * @memberof MemberResumeRequestBody
     */
    'member'?: MemberResumeRequest;
}
/**
 *
 * @export
 * @interface MemberStatusResponse
 */
export interface MemberStatusResponse {
    /**
     *
     * @type {string}
     * @memberof MemberStatusResponse
     */
    'aggregated_at'?: string | null;
    /**
     *
     * @type {Array<ChallengeResponse>}
     * @memberof MemberStatusResponse
     */
    'challenges'?: Array<ChallengeResponse>;
    /**
     *
     * @type {string}
     * @memberof MemberStatusResponse
     */
    'connection_status'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MemberStatusResponse
     */
    'guid'?: string;
    /**
     *
     * @type {boolean}
     * @memberof MemberStatusResponse
     */
    'has_processed_accounts'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof MemberStatusResponse
     */
    'has_processed_transactions'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof MemberStatusResponse
     */
    'is_authenticated'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof MemberStatusResponse
     */
    'is_being_aggregated'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof MemberStatusResponse
     */
    'successfully_aggregated_at'?: string | null;
}
/**
 *
 * @export
 * @interface MemberStatusResponseBody
 */
export interface MemberStatusResponseBody {
    /**
     *
     * @type {MemberStatusResponse}
     * @memberof MemberStatusResponseBody
     */
    'member'?: MemberStatusResponse;
}
/**
 *
 * @export
 * @interface MemberUpdateRequest
 */
export interface MemberUpdateRequest {
    /**
     *
     * @type {boolean}
     * @memberof MemberUpdateRequest
     */
    'background_aggregation_is_disabled'?: boolean;
    /**
     *
     * @type {Array<CredentialRequest>}
     * @memberof MemberUpdateRequest
     */
    'credentials'?: Array<CredentialRequest>;
    /**
     *
     * @type {string}
     * @memberof MemberUpdateRequest
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberUpdateRequest
     */
    'metadata'?: string;
    /**
     *
     * @type {boolean}
     * @memberof MemberUpdateRequest
     */
    'skip_aggregation'?: boolean;
}
/**
 *
 * @export
 * @interface MemberUpdateRequestBody
 */
export interface MemberUpdateRequestBody {
    /**
     *
     * @type {MemberUpdateRequest}
     * @memberof MemberUpdateRequestBody
     */
    'member'?: MemberUpdateRequest;
}
/**
 *
 * @export
 * @interface MembersResponseBody
 */
export interface MembersResponseBody {
    /**
     *
     * @type {Array<MemberResponse>}
     * @memberof MembersResponseBody
     */
    'members'?: Array<MemberResponse>;
    /**
     *
     * @type {PaginationResponse}
     * @memberof MembersResponseBody
     */
    'pagination'?: PaginationResponse;
}
/**
 *
 * @export
 * @interface MerchantLocationResponse
 */
export interface MerchantLocationResponse {
    /**
     *
     * @type {string}
     * @memberof MerchantLocationResponse
     */
    'city'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MerchantLocationResponse
     */
    'country'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MerchantLocationResponse
     */
    'created_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MerchantLocationResponse
     */
    'guid'?: string;
    /**
     *
     * @type {number}
     * @memberof MerchantLocationResponse
     */
    'latitude'?: number | null;
    /**
     *
     * @type {number}
     * @memberof MerchantLocationResponse
     */
    'longitude'?: number | null;
    /**
     *
     * @type {string}
     * @memberof MerchantLocationResponse
     */
    'merchant_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantLocationResponse
     */
    'phone_number'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MerchantLocationResponse
     */
    'postal_code'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MerchantLocationResponse
     */
    'state'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MerchantLocationResponse
     */
    'street_address'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MerchantLocationResponse
     */
    'updated_at'?: string | null;
}
/**
 *
 * @export
 * @interface MerchantLocationResponseBody
 */
export interface MerchantLocationResponseBody {
    /**
     *
     * @type {MerchantLocationResponse}
     * @memberof MerchantLocationResponseBody
     */
    'merchant_location'?: MerchantLocationResponse;
}
/**
 *
 * @export
 * @interface MerchantResponse
 */
export interface MerchantResponse {
    /**
     *
     * @type {string}
     * @memberof MerchantResponse
     */
    'created_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MerchantResponse
     */
    'guid'?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantResponse
     */
    'logo_url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MerchantResponse
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MerchantResponse
     */
    'updated_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof MerchantResponse
     */
    'website_url'?: string | null;
}
/**
 *
 * @export
 * @interface MerchantResponseBody
 */
export interface MerchantResponseBody {
    /**
     *
     * @type {MerchantResponse}
     * @memberof MerchantResponseBody
     */
    'merchant'?: MerchantResponse;
}
/**
 *
 * @export
 * @interface MerchantsResponseBody
 */
export interface MerchantsResponseBody {
    /**
     *
     * @type {Array<MerchantResponse>}
     * @memberof MerchantsResponseBody
     */
    'merchants'?: Array<MerchantResponse>;
    /**
     *
     * @type {PaginationResponse}
     * @memberof MerchantsResponseBody
     */
    'pagination'?: PaginationResponse;
}
/**
 *
 * @export
 * @interface OAuthWindowResponse
 */
export interface OAuthWindowResponse {
    /**
     *
     * @type {string}
     * @memberof OAuthWindowResponse
     */
    'guid'?: string;
    /**
     *
     * @type {string}
     * @memberof OAuthWindowResponse
     */
    'oauth_window_uri'?: string | null;
}
/**
 *
 * @export
 * @interface OAuthWindowResponseBody
 */
export interface OAuthWindowResponseBody {
    /**
     *
     * @type {OAuthWindowResponse}
     * @memberof OAuthWindowResponseBody
     */
    'member'?: OAuthWindowResponse;
}
/**
 *
 * @export
 * @interface OptionResponse
 */
export interface OptionResponse {
    /**
     *
     * @type {string}
     * @memberof OptionResponse
     */
    'label'?: string | null;
    /**
     *
     * @type {string}
     * @memberof OptionResponse
     */
    'value'?: string | null;
}
/**
 *
 * @export
 * @interface PaginationResponse
 */
export interface PaginationResponse {
    /**
     *
     * @type {number}
     * @memberof PaginationResponse
     */
    'current_page'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginationResponse
     */
    'per_page'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginationResponse
     */
    'total_entries'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginationResponse
     */
    'total_pages'?: number;
}
/**
 *
 * @export
 * @interface StatementResponse
 */
export interface StatementResponse {
    /**
     *
     * @type {string}
     * @memberof StatementResponse
     */
    'account_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof StatementResponse
     */
    'content_hash'?: string | null;
    /**
     *
     * @type {string}
     * @memberof StatementResponse
     */
    'created_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof StatementResponse
     */
    'guid'?: string;
    /**
     *
     * @type {string}
     * @memberof StatementResponse
     */
    'member_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof StatementResponse
     */
    'updated_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof StatementResponse
     */
    'uri'?: string | null;
    /**
     *
     * @type {string}
     * @memberof StatementResponse
     */
    'user_guid'?: string;
}
/**
 *
 * @export
 * @interface StatementResponseBody
 */
export interface StatementResponseBody {
    /**
     *
     * @type {StatementResponse}
     * @memberof StatementResponseBody
     */
    'statement'?: StatementResponse;
}
/**
 *
 * @export
 * @interface StatementsResponseBody
 */
export interface StatementsResponseBody {
    /**
     *
     * @type {PaginationResponse}
     * @memberof StatementsResponseBody
     */
    'pagination'?: PaginationResponse;
    /**
     *
     * @type {Array<StatementResponse>}
     * @memberof StatementsResponseBody
     */
    'statements'?: Array<StatementResponse>;
}
/**
 *
 * @export
 * @interface TagCreateRequest
 */
export interface TagCreateRequest {
    /**
     *
     * @type {string}
     * @memberof TagCreateRequest
     */
    'name': string;
}
/**
 *
 * @export
 * @interface TagCreateRequestBody
 */
export interface TagCreateRequestBody {
    /**
     *
     * @type {TagCreateRequest}
     * @memberof TagCreateRequestBody
     */
    'tag'?: TagCreateRequest;
}
/**
 *
 * @export
 * @interface TagResponse
 */
export interface TagResponse {
    /**
     *
     * @type {string}
     * @memberof TagResponse
     */
    'guid'?: string;
    /**
     *
     * @type {string}
     * @memberof TagResponse
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TagResponse
     */
    'user_guid'?: string;
}
/**
 *
 * @export
 * @interface TagResponseBody
 */
export interface TagResponseBody {
    /**
     *
     * @type {TagResponse}
     * @memberof TagResponseBody
     */
    'tag'?: TagResponse;
}
/**
 *
 * @export
 * @interface TagUpdateRequest
 */
export interface TagUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof TagUpdateRequest
     */
    'name': string;
}
/**
 *
 * @export
 * @interface TagUpdateRequestBody
 */
export interface TagUpdateRequestBody {
    /**
     *
     * @type {TagUpdateRequest}
     * @memberof TagUpdateRequestBody
     */
    'tag'?: TagUpdateRequest;
}
/**
 *
 * @export
 * @interface TaggingCreateRequest
 */
export interface TaggingCreateRequest {
    /**
     *
     * @type {string}
     * @memberof TaggingCreateRequest
     */
    'tag_guid': string;
    /**
     *
     * @type {string}
     * @memberof TaggingCreateRequest
     */
    'transaction_guid': string;
}
/**
 *
 * @export
 * @interface TaggingCreateRequestBody
 */
export interface TaggingCreateRequestBody {
    /**
     *
     * @type {TaggingCreateRequest}
     * @memberof TaggingCreateRequestBody
     */
    'tagging'?: TaggingCreateRequest;
}
/**
 *
 * @export
 * @interface TaggingResponse
 */
export interface TaggingResponse {
    /**
     *
     * @type {string}
     * @memberof TaggingResponse
     */
    'guid'?: string;
    /**
     *
     * @type {boolean}
     * @memberof TaggingResponse
     */
    'member_is_managed_by_user'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof TaggingResponse
     */
    'tag_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof TaggingResponse
     */
    'transaction_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof TaggingResponse
     */
    'user_guid'?: string;
}
/**
 *
 * @export
 * @interface TaggingResponseBody
 */
export interface TaggingResponseBody {
    /**
     *
     * @type {TaggingResponse}
     * @memberof TaggingResponseBody
     */
    'tagging'?: TaggingResponse;
}
/**
 *
 * @export
 * @interface TaggingUpdateRequest
 */
export interface TaggingUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof TaggingUpdateRequest
     */
    'tag_guid': string;
}
/**
 *
 * @export
 * @interface TaggingUpdateRequestBody
 */
export interface TaggingUpdateRequestBody {
    /**
     *
     * @type {TaggingUpdateRequest}
     * @memberof TaggingUpdateRequestBody
     */
    'tagging'?: TaggingUpdateRequest;
}
/**
 *
 * @export
 * @interface TaggingsResponseBody
 */
export interface TaggingsResponseBody {
    /**
     *
     * @type {PaginationResponse}
     * @memberof TaggingsResponseBody
     */
    'pagination'?: PaginationResponse;
    /**
     *
     * @type {Array<TaggingResponse>}
     * @memberof TaggingsResponseBody
     */
    'taggings'?: Array<TaggingResponse>;
}
/**
 *
 * @export
 * @interface TagsResponseBody
 */
export interface TagsResponseBody {
    /**
     *
     * @type {PaginationResponse}
     * @memberof TagsResponseBody
     */
    'pagination'?: PaginationResponse;
    /**
     *
     * @type {Array<TagResponse>}
     * @memberof TagsResponseBody
     */
    'tags'?: Array<TagResponse>;
}
/**
 *
 * @export
 * @interface TransactionResponse
 */
export interface TransactionResponse {
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'account_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'account_id'?: string | null;
    /**
     *
     * @type {number}
     * @memberof TransactionResponse
     */
    'amount'?: number | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'category'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'category_guid'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'check_number_string'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'created_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'currency_code'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'date'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'extended_transaction_type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'guid'?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'id'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof TransactionResponse
     */
    'is_bill_pay'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof TransactionResponse
     */
    'is_direct_deposit'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof TransactionResponse
     */
    'is_expense'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof TransactionResponse
     */
    'is_fee'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof TransactionResponse
     */
    'is_income'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof TransactionResponse
     */
    'is_international'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof TransactionResponse
     */
    'is_overdraft_fee'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof TransactionResponse
     */
    'is_payroll_advance'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof TransactionResponse
     */
    'is_recurring'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof TransactionResponse
     */
    'is_subscription'?: boolean | null;
    /**
     *
     * @type {number}
     * @memberof TransactionResponse
     */
    'latitude'?: number | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'localized_description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'localized_memo'?: string | null;
    /**
     *
     * @type {number}
     * @memberof TransactionResponse
     */
    'longitude'?: number | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'member_guid'?: string;
    /**
     *
     * @type {boolean}
     * @memberof TransactionResponse
     */
    'member_is_managed_by_user'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'memo'?: string | null;
    /**
     *
     * @type {number}
     * @memberof TransactionResponse
     */
    'merchant_category_code'?: number | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'merchant_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'merchant_location_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'metadata'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'original_description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'posted_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'status'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'top_level_category'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'transacted_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'updated_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'user_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionResponse
     */
    'user_id'?: string | null;
}
/**
 *
 * @export
 * @interface TransactionResponseBody
 */
export interface TransactionResponseBody {
    /**
     *
     * @type {TransactionResponse}
     * @memberof TransactionResponseBody
     */
    'transaction'?: TransactionResponse;
}
/**
 *
 * @export
 * @interface TransactionRuleCreateRequest
 */
export interface TransactionRuleCreateRequest {
    /**
     *
     * @type {string}
     * @memberof TransactionRuleCreateRequest
     */
    'category_guid': string;
    /**
     *
     * @type {string}
     * @memberof TransactionRuleCreateRequest
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionRuleCreateRequest
     */
    'match_description': string;
}
/**
 *
 * @export
 * @interface TransactionRuleCreateRequestBody
 */
export interface TransactionRuleCreateRequestBody {
    /**
     *
     * @type {TransactionRuleCreateRequest}
     * @memberof TransactionRuleCreateRequestBody
     */
    'transaction_rule'?: TransactionRuleCreateRequest;
}
/**
 *
 * @export
 * @interface TransactionRuleResponse
 */
export interface TransactionRuleResponse {
    /**
     *
     * @type {string}
     * @memberof TransactionRuleResponse
     */
    'category_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionRuleResponse
     */
    'created_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionRuleResponse
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionRuleResponse
     */
    'guid'?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionRuleResponse
     */
    'match_description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionRuleResponse
     */
    'updated_at'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionRuleResponse
     */
    'user_guid'?: string;
}
/**
 *
 * @export
 * @interface TransactionRuleResponseBody
 */
export interface TransactionRuleResponseBody {
    /**
     *
     * @type {TransactionRuleResponse}
     * @memberof TransactionRuleResponseBody
     */
    'transaction_rule'?: TransactionRuleResponse;
}
/**
 *
 * @export
 * @interface TransactionRuleUpdateRequest
 */
export interface TransactionRuleUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof TransactionRuleUpdateRequest
     */
    'category_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof TransactionRuleUpdateRequest
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TransactionRuleUpdateRequest
     */
    'match_description'?: string | null;
}
/**
 *
 * @export
 * @interface TransactionRuleUpdateRequestBody
 */
export interface TransactionRuleUpdateRequestBody {
    /**
     *
     * @type {TransactionRuleUpdateRequest}
     * @memberof TransactionRuleUpdateRequestBody
     */
    'transaction_rule'?: TransactionRuleUpdateRequest;
}
/**
 *
 * @export
 * @interface TransactionRulesResponseBody
 */
export interface TransactionRulesResponseBody {
    /**
     *
     * @type {PaginationResponse}
     * @memberof TransactionRulesResponseBody
     */
    'pagination'?: PaginationResponse;
    /**
     *
     * @type {Array<TransactionRuleResponse>}
     * @memberof TransactionRulesResponseBody
     */
    'transaction_rules'?: Array<TransactionRuleResponse>;
}
/**
 *
 * @export
 * @interface TransactionUpdateRequest
 */
export interface TransactionUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof TransactionUpdateRequest
     */
    'description': string;
}
/**
 *
 * @export
 * @interface TransactionUpdateRequestBody
 */
export interface TransactionUpdateRequestBody {
    /**
     *
     * @type {TransactionUpdateRequest}
     * @memberof TransactionUpdateRequestBody
     */
    'transaction'?: TransactionUpdateRequest;
}
/**
 *
 * @export
 * @interface TransactionsResponseBody
 */
export interface TransactionsResponseBody {
    /**
     *
     * @type {PaginationResponse}
     * @memberof TransactionsResponseBody
     */
    'pagination'?: PaginationResponse;
    /**
     *
     * @type {Array<TransactionResponse>}
     * @memberof TransactionsResponseBody
     */
    'transactions'?: Array<TransactionResponse>;
}
/**
 *
 * @export
 * @interface UserCreateRequest
 */
export interface UserCreateRequest {
    /**
     *
     * @type {string}
     * @memberof UserCreateRequest
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof UserCreateRequest
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof UserCreateRequest
     */
    'is_disabled'?: boolean;
    /**
     *
     * @type {string}
     * @memberof UserCreateRequest
     */
    'metadata'?: string;
}
/**
 *
 * @export
 * @interface UserCreateRequestBody
 */
export interface UserCreateRequestBody {
    /**
     *
     * @type {UserCreateRequest}
     * @memberof UserCreateRequestBody
     */
    'user'?: UserCreateRequest;
}
/**
 *
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     *
     * @type {string}
     * @memberof UserResponse
     */
    'email'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserResponse
     */
    'guid'?: string;
    /**
     *
     * @type {string}
     * @memberof UserResponse
     */
    'id'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof UserResponse
     */
    'is_disabled'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof UserResponse
     */
    'metadata'?: string | null;
}
/**
 *
 * @export
 * @interface UserResponseBody
 */
export interface UserResponseBody {
    /**
     *
     * @type {UserResponse}
     * @memberof UserResponseBody
     */
    'user'?: UserResponse;
}
/**
 *
 * @export
 * @interface UserUpdateRequest
 */
export interface UserUpdateRequest {
    /**
     *
     * @type {string}
     * @memberof UserUpdateRequest
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof UserUpdateRequest
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof UserUpdateRequest
     */
    'is_disabled'?: boolean;
    /**
     *
     * @type {string}
     * @memberof UserUpdateRequest
     */
    'metadata'?: string;
}
/**
 *
 * @export
 * @interface UserUpdateRequestBody
 */
export interface UserUpdateRequestBody {
    /**
     *
     * @type {UserUpdateRequest}
     * @memberof UserUpdateRequestBody
     */
    'user'?: UserUpdateRequest;
}
/**
 *
 * @export
 * @interface UsersResponseBody
 */
export interface UsersResponseBody {
    /**
     *
     * @type {PaginationResponse}
     * @memberof UsersResponseBody
     */
    'pagination'?: PaginationResponse;
    /**
     *
     * @type {Array<UserResponse>}
     * @memberof UsersResponseBody
     */
    'users'?: Array<UserResponse>;
}
/**
 *
 * @export
 * @interface WidgetRequest
 */
export interface WidgetRequest {
    /**
     *
     * @type {string}
     * @memberof WidgetRequest
     */
    'color_scheme'?: string;
    /**
     *
     * @type {string}
     * @memberof WidgetRequest
     */
    'current_institution_code'?: string;
    /**
     *
     * @type {string}
     * @memberof WidgetRequest
     */
    'current_institution_guid'?: string;
    /**
     *
     * @type {string}
     * @memberof WidgetRequest
     */
    'current_member_guid'?: string;
    /**
     *
     * @type {boolean}
     * @memberof WidgetRequest
     */
    'disable_institution_search'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof WidgetRequest
     */
    'include_transactions'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof WidgetRequest
     */
    'is_mobile_webview'?: boolean;
    /**
     *
     * @type {string}
     * @memberof WidgetRequest
     */
    'mode'?: string;
    /**
     *
     * @type {number}
     * @memberof WidgetRequest
     */
    'ui_message_version'?: number;
    /**
     *
     * @type {string}
     * @memberof WidgetRequest
     */
    'ui_message_webview_url_scheme'?: string;
    /**
     *
     * @type {boolean}
     * @memberof WidgetRequest
     */
    'update_credentials'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof WidgetRequest
     */
    'wait_for_full_aggregation'?: boolean;
    /**
     *
     * @type {string}
     * @memberof WidgetRequest
     */
    'widget_type': string;
}
/**
 *
 * @export
 * @interface WidgetRequestBody
 */
export interface WidgetRequestBody {
    /**
     *
     * @type {WidgetRequest}
     * @memberof WidgetRequestBody
     */
    'widget_url'?: WidgetRequest;
}
/**
 *
 * @export
 * @interface WidgetResponse
 */
export interface WidgetResponse {
    /**
     *
     * @type {string}
     * @memberof WidgetResponse
     */
    'type'?: string | null;
    /**
     *
     * @type {string}
     * @memberof WidgetResponse
     */
    'url'?: string | null;
    /**
     *
     * @type {string}
     * @memberof WidgetResponse
     */
    'user_id'?: string | null;
}
/**
 *
 * @export
 * @interface WidgetResponseBody
 */
export interface WidgetResponseBody {
    /**
     *
     * @type {WidgetResponse}
     * @memberof WidgetResponseBody
     */
    'widget_url'?: WidgetResponse;
}
/**
 * MxPlatformApi - axios parameter creator
 * @export
 */
export declare const MxPlatformApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
     * @summary Aggregate member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateMember: (memberGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
     * @summary Check balances
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkBalances: (memberGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to create a new custom category for a specific `user`.
     * @summary Create category
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {CategoryCreateRequestBody} categoryCreateRequestBody Custom category object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCategory: (userGuid: string, categoryCreateRequestBody: CategoryCreateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to create a partner-managed account.
     * @summary Create managed account
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {ManagedAccountCreateRequestBody} managedAccountCreateRequestBody Managed account to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManagedAccount: (userGuid: string, memberGuid: string, managedAccountCreateRequestBody: ManagedAccountCreateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to create a new partner-managed `member`.
     * @summary Create managed member
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ManagedMemberCreateRequestBody} managedMemberCreateRequestBody Managed member to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManagedMember: (userGuid: string, managedMemberCreateRequestBody: ManagedMemberCreateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to create a new partner-managed `transaction`.
     * @summary Create managed transaction
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {ManagedTransactionCreateRequestBody} managedTransactionCreateRequestBody Managed transaction to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManagedTransaction: (userGuid: string, memberGuid: string, managedTransactionCreateRequestBody: ManagedTransactionCreateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the `/institutions/{institution_code}/credentials` endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
     * @summary Create member
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {MemberCreateRequestBody} memberCreateRequestBody Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMember: (userGuid: string, memberCreateRequestBody: MemberCreateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to create a new custom tag.
     * @summary Create tag
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TagCreateRequestBody} tagCreateRequestBody Tag object to be created with required parameters (tag_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTag: (userGuid: string, tagCreateRequestBody: TagCreateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
     * @summary Create tagging
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TaggingCreateRequestBody} taggingCreateRequestBody Tagging object to be created with required parameters (tag_guid and transaction_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTagging: (userGuid: string, taggingCreateRequestBody: TaggingCreateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to create a new transaction rule. The newly-created `transaction_rule` object will be returned if successful.
     * @summary Create transaction rule
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TransactionRuleCreateRequestBody} transactionRuleCreateRequestBody TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionRule: (userGuid: string, transactionRuleCreateRequestBody: TransactionRuleCreateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Call this endpoint to create a new user. The MX Platform API will respond with the newly-created user object if successful. This endpoint accepts several parameters - id, metadata, and is_disabled. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that users data until they are no longer disabled. Users who are disabled for the entirety of an MX Platform API billing period will not be factored into that months bill.
     * @summary Create user
     * @param {UserCreateRequestBody} userCreateRequestBody User object to be created. (None of these parameters are required, but the user object cannot be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (userCreateRequestBody: UserCreateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of `204 No Content`.
     * @summary Delete category
     * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategory: (categoryGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of `204 No Content`.
     * @summary Delete managed account
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagedAccount: (memberGuid: string, userGuid: string, accountGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to delete the specified partner-managed `member`. The endpoint will respond with a status of `204 No Content` without a resource.
     * @summary Delete managed member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagedMember: (memberGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to delete the specified partner-managed `transaction`. The endpoint will respond with a status of `204 No Content` without a resource.
     * @summary Delete managed transaction
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagedTransaction: (memberGuid: string, userGuid: string, transactionGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Accessing this endpoint will permanently delete a member.
     * @summary Delete member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember: (memberGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of `204 No Content`.
     * @summary Delete tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTag: (tagGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
     * @summary Delete tagging
     * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTagging: (taggingGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to permanently delete a transaction rule based on its unique GUID.
     * @summary Delete transaction rule
     * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransactionRule: (transactionRuleGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to delete the specified `user`. The response will have a status of `204 No Content` without an object.
     * @summary Delete user
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: (userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to download a specified statement PDF.
     * @summary Download statement pdf
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} statementGuid The unique id for a &#x60;statement&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadStatementPDF: (memberGuid: string, statementGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
     * @summary Enhance transactions
     * @param {EnhanceTransactionsRequestBody} enhanceTransactionsRequestBody Transaction object to be enhanced
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enhanceTransactions: (enhanceTransactionsRequestBody: EnhanceTransactionsRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
     * @summary Extend history
     * @param {string} memberGuid The unique identifier for a &#x60;member&#x60;.
     * @param {string} userGuid The unique identifier for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    extendHistory: (memberGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to fetch the statements associated with a particular member.
     * @summary Fetch statements
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchStatements: (memberGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The identify endpoint begins an identification process for an already-existing member.
     * @summary Identify member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifyMember: (memberGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a list of account numbers associated with the specified `account`.
     * @summary List account numbers by account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccountNumbersByAccount: (accountGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a list of account numbers associated with the specified `member`.
     * @summary List account numbers by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccountNumbersByMember: (memberGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns an array with information about every account associated with a particular member.
     * @summary List account owners by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccountOwnersByMember: (memberGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to list all categories associated with a `user`, including both default and custom categories.
     * @summary List categories
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCategories: (userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to read the attributes of a specific user.
     * @summary List default categories
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDefaultCategories: (userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
     * @summary List favorite institutions
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFavoriteInstitutions: (page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns all holdings associated with the specified `user` across all accounts and members.
     * @summary List holdings
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter holdings from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter holdings to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHoldings: (userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns all holdings associated with the specified `member` across all accounts.
     * @summary List holdings by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter holdings from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter holdings to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHoldingsByMember: (memberGuid: string, userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to see which credentials will be needed to create a member for a specific institution.
     * @summary List institution credentials
     * @param {string} institutionCode The institution_code of the institution.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInstitutionCredentials: (institutionCode: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a list of institutions based on the specified search term or parameter.
     * @summary List institutions
     * @param {string} [name] This will list only institutions in which the appended string appears.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {boolean} [supportsAccountIdentification] Filter only institutions which support account identification.
     * @param {boolean} [supportsAccountStatement] Filter only institutions which support account statements.
     * @param {boolean} [supportsAccountVerification] Filter only institutions which support account verification.
     * @param {boolean} [supportsTransactionHistory] Filter only institutions which support extended transaction history.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInstitutions: (name?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, supportsAccountIdentification?: boolean | undefined, supportsAccountStatement?: boolean | undefined, supportsAccountVerification?: boolean | undefined, supportsTransactionHistory?: boolean | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
     * @summary List managed accounts
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listManagedAccounts: (userGuid: string, memberGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a list of institutions which can be used to create partner-managed members.
     * @summary List managed institutions
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listManagedInstitutions: (page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a list of all the partner-managed members associated with the specified `user`.
     * @summary List managed members
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listManagedMembers: (userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a list of all the partner-managed transactions associated with the specified `account`, scoped through a `user` and a `member`.
     * @summary List managed transactions
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listManagedTransactions: (userGuid: string, memberGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of `CHALLENGED`, then code `204 No Content` will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of `CHALLENGED`, then code `200 OK` will be returned - along with the corresponding credentials.
     * @summary List member challenges
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMemberChallenges: (memberGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
     * @summary List member credentials
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMemberCredentials: (memberGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns an array which contains information on every member associated with a specific user.
     * @summary List members
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMembers: (userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a paginated list of all the merchants in the MX system.
     * @summary List merchants
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMerchants: (page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to get an array of available statements.
     * @summary List statements by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStatementsByMember: (memberGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to retrieve a list of all the taggings associated with a specific user.
     * @summary List taggings
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTaggings: (userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to list all tags associated with the specified `user`. Each user includes the `Business` tag by default.
     * @summary List tags
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTags: (userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
     * @summary List transaction rules
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactionRules: (userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Requests to this endpoint return a list of transactions associated with the specified `user`, accross all members and accounts associated with that `user`.
     * @summary List transactions
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions: (userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a list of the last 90 days of transactions associated with the specified account.
     * @summary List transactions by account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactionsByAccount: (accountGuid: string, userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Requests to this endpoint return a list of transactions associated with the specified `member`, accross all accounts associated with that `member`.
     * @summary List transactions by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactionsByMember: (memberGuid: string, userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
     * @summary List transactions by tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactionsByTag: (tagGuid: string, userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a list of all the accounts associated with the specified `user`.
     * @summary List accounts
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserAccounts: (userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to list every user you\'ve created in the MX Platform API.
     * @summary List users
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers: (page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns the specified `account` resource.
     * @summary Read account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAccount: (accountGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to read the attributes of either a default category or a custom category.
     * @summary Read category
     * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCategory: (categoryGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to read the attributes of a specific `holding`.
     * @summary Read holding
     * @param {string} holdingGuid The unique id for a &#x60;holding&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readHolding: (holdingGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns information about the institution specified by `institution_code`.
     * @summary Read institution
     * @param {string} institutionCode The institution_code of the institution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readInstitution: (institutionCode: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
     * @summary Read managed account
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readManagedAccount: (memberGuid: string, userGuid: string, accountGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns the attributes of the specified partner-managed `member`.
     * @summary Read managed member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readManagedMember: (memberGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Requests to this endpoint will return the attributes of the specified partner-managed `transaction`.
     * @summary Read managed transaction
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readManagedTransaction: (memberGuid: string, userGuid: string, transactionGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to read the attributes of a specific member.
     * @summary Read member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMember: (memberGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
     * @summary Read member status
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMemberStatus: (memberGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns information about a particular merchant, such as a logo, name, and website.
     * @summary Read merchant
     * @param {string} merchantGuid The unique id for a &#x60;merchant&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMerchant: (merchantGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns the specified merchant_location resource.
     * @summary Read merchant location
     * @param {string} merchantLocationGuid The unique id for a &#x60;merchant_location&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMerchantLocation: (merchantLocationGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to read a JSON representation of the statement.
     * @summary Read statement by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} statementGuid The unique id for a &#x60;statement&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readStatementByMember: (memberGuid: string, statementGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to read the attributes of a particular tag according to its unique GUID.
     * @summary Read tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readTag: (tagGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to read the attributes of a `tagging` according to its unique GUID.
     * @summary Read tagging
     * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readTagging: (taggingGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Requests to this endpoint will return the attributes of the specified `transaction`.
     * @summary Read transaction
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readTransaction: (transactionGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
     * @summary Read transaction rule
     * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readTransactionRule: (transactionRuleGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to read the attributes of a specific user.
     * @summary Read user
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUser: (userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint will return a URL for an embeddable version of MX Connect.
     * @summary Request connect widget url
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ConnectWidgetRequestBody} [connectWidgetRequestBody] Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestConnectWidgetURL: (userGuid: string, connectWidgetRequestBody?: ConnectWidgetRequestBody | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint will generate an `oauth_window_uri` for the specified `member`.
     * @summary Request oauth window uri
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [referralSource] Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;.
     * @param {string} [uiMessageWebviewUrlScheme] A scheme for routing the user back to the application state they were previously in.
     * @param {boolean} [skipAggregation] Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestOAuthWindowURI: (memberGuid: string, userGuid: string, referralSource?: string | undefined, uiMessageWebviewUrlScheme?: string | undefined, skipAggregation?: boolean | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint allows partners to get a URL by passing the `widget_type` in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the `widget_type` to `connect_widget`. Partners may also pass an optional `Accept-Language` header as well as a number of configuration options. Note that this is a `POST` request.
     * @summary Request widget url
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {WidgetRequestBody} widgetRequestBody The widget url configuration options.
     * @param {string} [acceptLanguage] The desired language of the widget.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestWidgetURL: (userGuid: string, widgetRequestBody: WidgetRequestBody, acceptLanguage?: string | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
     * @summary Resume aggregation
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {MemberResumeRequestBody} memberResumeRequestBody Member object with MFA challenge answers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resumeAggregation: (memberGuid: string, userGuid: string, memberResumeRequestBody: MemberResumeRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint allows you to update certain attributes of an `account` resource.
     * @summary Update account by member
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {AccountUpdateRequestBody} accountUpdateRequestBody Account object to be created with optional parameters (is_hidden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccountByMember: (userGuid: string, memberGuid: string, accountGuid: string, accountUpdateRequestBody: AccountUpdateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to update the attributes of a custom category according to its unique GUID.
     * @summary Update category
     * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {CategoryUpdateRequestBody} categoryUpdateRequestBody Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategory: (categoryGuid: string, userGuid: string, categoryUpdateRequestBody: CategoryUpdateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
     * @summary Update managed account
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {ManagedAccountUpdateRequestBody} managedAccountUpdateRequestBody Managed account object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateManagedAccount: (memberGuid: string, userGuid: string, accountGuid: string, managedAccountUpdateRequestBody: ManagedAccountUpdateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to update the attributes of the specified partner_managed `member`.
     * @summary Update managed member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ManagedMemberUpdateRequestBody} managedMemberUpdateRequestBody Managed member object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateManagedMember: (memberGuid: string, userGuid: string, managedMemberUpdateRequestBody: ManagedMemberUpdateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to update the attributes of the specified partner_managed `transaction`.
     * @summary Update managed transaction
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {ManagedTransactionUpdateRequestBody} managedTransactionUpdateRequestBody Managed transaction object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateManagedTransaction: (memberGuid: string, userGuid: string, transactionGuid: string, managedTransactionUpdateRequestBody: ManagedTransactionUpdateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
     * @summary Update member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {MemberUpdateRequestBody} memberUpdateRequestBody Member object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMember: (memberGuid: string, userGuid: string, memberUpdateRequestBody: MemberUpdateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to update the name of a specific tag according to its unique GUID.
     * @summary Update tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TagUpdateRequestBody} tagUpdateRequestBody Tag object to be updated with required parameter (tag_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTag: (tagGuid: string, userGuid: string, tagUpdateRequestBody: TagUpdateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to update a tagging.
     * @summary Update tagging
     * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TaggingUpdateRequestBody} taggingUpdateRequestBody Tagging object to be updated with required parameter (tag_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTagging: (taggingGuid: string, userGuid: string, taggingUpdateRequestBody: TaggingUpdateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to update the `description` of a specific transaction according to its unique GUID.
     * @summary Update transaction
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TransactionUpdateRequestBody} transactionUpdateRequestBody Transaction object to be updated with a new description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTransaction: (transactionGuid: string, userGuid: string, transactionUpdateRequestBody: TransactionUpdateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
     * @summary Update transaction_rule
     * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TransactionRuleUpdateRequestBody} transactionRuleUpdateRequestBody TransactionRule object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTransactionRule: (transactionRuleGuid: string, userGuid: string, transactionRuleUpdateRequestBody: TransactionRuleUpdateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to update the attributes of a specific user. The MX Platform API will respond with the updated user object. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that users data until they are no longer disabled. Users who are disabled for the entirety of an MX Platform API billing period will not be factored into that months bill. To disable a user, update it and set the is_disabled parameter to true. Set it to false to re-enable the user.
     * @summary Update user
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {UserUpdateRequestBody} userUpdateRequestBody User object to be updated (None of these parameters are required, but the user object cannot be empty.)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: (userGuid: string, userUpdateRequestBody: UserUpdateRequestBody, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The verify endpoint begins a verification process for a member.
     * @summary Verify member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyMember: (memberGuid: string, userGuid: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MxPlatformApi - functional programming interface
 * @export
 */
export declare const MxPlatformApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
     * @summary Aggregate member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateMember(memberGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MemberResponseBody>>;
    /**
     * This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
     * @summary Check balances
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkBalances(memberGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MemberResponseBody>>;
    /**
     * Use this endpoint to create a new custom category for a specific `user`.
     * @summary Create category
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {CategoryCreateRequestBody} categoryCreateRequestBody Custom category object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCategory(userGuid: string, categoryCreateRequestBody: CategoryCreateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CategoryResponseBody>>;
    /**
     * Use this endpoint to create a partner-managed account.
     * @summary Create managed account
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {ManagedAccountCreateRequestBody} managedAccountCreateRequestBody Managed account to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManagedAccount(userGuid: string, memberGuid: string, managedAccountCreateRequestBody: ManagedAccountCreateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AccountResponseBody>>;
    /**
     * Use this endpoint to create a new partner-managed `member`.
     * @summary Create managed member
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ManagedMemberCreateRequestBody} managedMemberCreateRequestBody Managed member to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManagedMember(userGuid: string, managedMemberCreateRequestBody: ManagedMemberCreateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MemberResponseBody>>;
    /**
     * Use this endpoint to create a new partner-managed `transaction`.
     * @summary Create managed transaction
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {ManagedTransactionCreateRequestBody} managedTransactionCreateRequestBody Managed transaction to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManagedTransaction(userGuid: string, memberGuid: string, managedTransactionCreateRequestBody: ManagedTransactionCreateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionResponseBody>>;
    /**
     * This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the `/institutions/{institution_code}/credentials` endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
     * @summary Create member
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {MemberCreateRequestBody} memberCreateRequestBody Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMember(userGuid: string, memberCreateRequestBody: MemberCreateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MemberResponseBody>>;
    /**
     * Use this endpoint to create a new custom tag.
     * @summary Create tag
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TagCreateRequestBody} tagCreateRequestBody Tag object to be created with required parameters (tag_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTag(userGuid: string, tagCreateRequestBody: TagCreateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TagResponseBody>>;
    /**
     * Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
     * @summary Create tagging
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TaggingCreateRequestBody} taggingCreateRequestBody Tagging object to be created with required parameters (tag_guid and transaction_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTagging(userGuid: string, taggingCreateRequestBody: TaggingCreateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TaggingResponseBody>>;
    /**
     * Use this endpoint to create a new transaction rule. The newly-created `transaction_rule` object will be returned if successful.
     * @summary Create transaction rule
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TransactionRuleCreateRequestBody} transactionRuleCreateRequestBody TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionRule(userGuid: string, transactionRuleCreateRequestBody: TransactionRuleCreateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionRuleResponseBody>>;
    /**
     * Call this endpoint to create a new user. The MX Platform API will respond with the newly-created user object if successful. This endpoint accepts several parameters - id, metadata, and is_disabled. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that users data until they are no longer disabled. Users who are disabled for the entirety of an MX Platform API billing period will not be factored into that months bill.
     * @summary Create user
     * @param {UserCreateRequestBody} userCreateRequestBody User object to be created. (None of these parameters are required, but the user object cannot be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(userCreateRequestBody: UserCreateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UserResponseBody>>;
    /**
     * Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of `204 No Content`.
     * @summary Delete category
     * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategory(categoryGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of `204 No Content`.
     * @summary Delete managed account
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagedAccount(memberGuid: string, userGuid: string, accountGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Use this endpoint to delete the specified partner-managed `member`. The endpoint will respond with a status of `204 No Content` without a resource.
     * @summary Delete managed member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagedMember(memberGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Use this endpoint to delete the specified partner-managed `transaction`. The endpoint will respond with a status of `204 No Content` without a resource.
     * @summary Delete managed transaction
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagedTransaction(memberGuid: string, userGuid: string, transactionGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Accessing this endpoint will permanently delete a member.
     * @summary Delete member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember(memberGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of `204 No Content`.
     * @summary Delete tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTag(tagGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
     * @summary Delete tagging
     * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTagging(taggingGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Use this endpoint to permanently delete a transaction rule based on its unique GUID.
     * @summary Delete transaction rule
     * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransactionRule(transactionRuleGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Use this endpoint to delete the specified `user`. The response will have a status of `204 No Content` without an object.
     * @summary Delete user
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<void>>;
    /**
     * Use this endpoint to download a specified statement PDF.
     * @summary Download statement pdf
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} statementGuid The unique id for a &#x60;statement&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadStatementPDF(memberGuid: string, statementGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     * Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
     * @summary Enhance transactions
     * @param {EnhanceTransactionsRequestBody} enhanceTransactionsRequestBody Transaction object to be enhanced
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enhanceTransactions(enhanceTransactionsRequestBody: EnhanceTransactionsRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<EnhanceTransactionsResponseBody>>;
    /**
     * Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
     * @summary Extend history
     * @param {string} memberGuid The unique identifier for a &#x60;member&#x60;.
     * @param {string} userGuid The unique identifier for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    extendHistory(memberGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MemberResponseBody>>;
    /**
     * Use this endpoint to fetch the statements associated with a particular member.
     * @summary Fetch statements
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchStatements(memberGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MemberResponseBody>>;
    /**
     * The identify endpoint begins an identification process for an already-existing member.
     * @summary Identify member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifyMember(memberGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MemberResponseBody>>;
    /**
     * This endpoint returns a list of account numbers associated with the specified `account`.
     * @summary List account numbers by account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccountNumbersByAccount(accountGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AccountNumbersResponseBody>>;
    /**
     * This endpoint returns a list of account numbers associated with the specified `member`.
     * @summary List account numbers by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccountNumbersByMember(memberGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AccountNumbersResponseBody>>;
    /**
     * This endpoint returns an array with information about every account associated with a particular member.
     * @summary List account owners by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccountOwnersByMember(memberGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AccountOwnersResponseBody>>;
    /**
     * Use this endpoint to list all categories associated with a `user`, including both default and custom categories.
     * @summary List categories
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCategories(userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CategoriesResponseBody>>;
    /**
     * Use this endpoint to read the attributes of a specific user.
     * @summary List default categories
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDefaultCategories(userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CategoriesResponseBody>>;
    /**
     * This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
     * @summary List favorite institutions
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFavoriteInstitutions(page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InstitutionsResponseBody>>;
    /**
     * This endpoint returns all holdings associated with the specified `user` across all accounts and members.
     * @summary List holdings
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter holdings from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter holdings to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHoldings(userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HoldingsResponseBody>>;
    /**
     * This endpoint returns all holdings associated with the specified `member` across all accounts.
     * @summary List holdings by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter holdings from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter holdings to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHoldingsByMember(memberGuid: string, userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HoldingsResponseBody>>;
    /**
     * Use this endpoint to see which credentials will be needed to create a member for a specific institution.
     * @summary List institution credentials
     * @param {string} institutionCode The institution_code of the institution.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInstitutionCredentials(institutionCode: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CredentialsResponseBody>>;
    /**
     * This endpoint returns a list of institutions based on the specified search term or parameter.
     * @summary List institutions
     * @param {string} [name] This will list only institutions in which the appended string appears.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {boolean} [supportsAccountIdentification] Filter only institutions which support account identification.
     * @param {boolean} [supportsAccountStatement] Filter only institutions which support account statements.
     * @param {boolean} [supportsAccountVerification] Filter only institutions which support account verification.
     * @param {boolean} [supportsTransactionHistory] Filter only institutions which support extended transaction history.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInstitutions(name?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, supportsAccountIdentification?: boolean | undefined, supportsAccountStatement?: boolean | undefined, supportsAccountVerification?: boolean | undefined, supportsTransactionHistory?: boolean | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InstitutionsResponseBody>>;
    /**
     * Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
     * @summary List managed accounts
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listManagedAccounts(userGuid: string, memberGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AccountsResponseBody>>;
    /**
     * This endpoint returns a list of institutions which can be used to create partner-managed members.
     * @summary List managed institutions
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listManagedInstitutions(page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InstitutionsResponseBody>>;
    /**
     * This endpoint returns a list of all the partner-managed members associated with the specified `user`.
     * @summary List managed members
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listManagedMembers(userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MembersResponseBody>>;
    /**
     * This endpoint returns a list of all the partner-managed transactions associated with the specified `account`, scoped through a `user` and a `member`.
     * @summary List managed transactions
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listManagedTransactions(userGuid: string, memberGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionsResponseBody>>;
    /**
     * Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of `CHALLENGED`, then code `204 No Content` will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of `CHALLENGED`, then code `200 OK` will be returned - along with the corresponding credentials.
     * @summary List member challenges
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMemberChallenges(memberGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ChallengesResponseBody>>;
    /**
     * This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
     * @summary List member credentials
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMemberCredentials(memberGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CredentialsResponseBody>>;
    /**
     * This endpoint returns an array which contains information on every member associated with a specific user.
     * @summary List members
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMembers(userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MembersResponseBody>>;
    /**
     * This endpoint returns a paginated list of all the merchants in the MX system.
     * @summary List merchants
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMerchants(page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MerchantsResponseBody>>;
    /**
     * Use this endpoint to get an array of available statements.
     * @summary List statements by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStatementsByMember(memberGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StatementsResponseBody>>;
    /**
     * Use this endpoint to retrieve a list of all the taggings associated with a specific user.
     * @summary List taggings
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTaggings(userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TaggingsResponseBody>>;
    /**
     * Use this endpoint to list all tags associated with the specified `user`. Each user includes the `Business` tag by default.
     * @summary List tags
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTags(userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TagsResponseBody>>;
    /**
     * Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
     * @summary List transaction rules
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactionRules(userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionRulesResponseBody>>;
    /**
     * Requests to this endpoint return a list of transactions associated with the specified `user`, accross all members and accounts associated with that `user`.
     * @summary List transactions
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions(userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionsResponseBody>>;
    /**
     * This endpoint returns a list of the last 90 days of transactions associated with the specified account.
     * @summary List transactions by account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactionsByAccount(accountGuid: string, userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionsResponseBody>>;
    /**
     * Requests to this endpoint return a list of transactions associated with the specified `member`, accross all accounts associated with that `member`.
     * @summary List transactions by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactionsByMember(memberGuid: string, userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionsResponseBody>>;
    /**
     * Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
     * @summary List transactions by tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactionsByTag(tagGuid: string, userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionsResponseBody>>;
    /**
     * This endpoint returns a list of all the accounts associated with the specified `user`.
     * @summary List accounts
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserAccounts(userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AccountsResponseBody>>;
    /**
     * Use this endpoint to list every user you\'ve created in the MX Platform API.
     * @summary List users
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(page?: number | undefined, recordsPerPage?: number | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UsersResponseBody>>;
    /**
     * This endpoint returns the specified `account` resource.
     * @summary Read account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAccount(accountGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AccountResponseBody>>;
    /**
     * Use this endpoint to read the attributes of either a default category or a custom category.
     * @summary Read category
     * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCategory(categoryGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CategoryResponseBody>>;
    /**
     * Use this endpoint to read the attributes of a specific `holding`.
     * @summary Read holding
     * @param {string} holdingGuid The unique id for a &#x60;holding&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readHolding(holdingGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<HoldingResponseBody>>;
    /**
     * This endpoint returns information about the institution specified by `institution_code`.
     * @summary Read institution
     * @param {string} institutionCode The institution_code of the institution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readInstitution(institutionCode: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InstitutionResponseBody>>;
    /**
     * Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
     * @summary Read managed account
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readManagedAccount(memberGuid: string, userGuid: string, accountGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AccountResponseBody>>;
    /**
     * This endpoint returns the attributes of the specified partner-managed `member`.
     * @summary Read managed member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readManagedMember(memberGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MemberResponseBody>>;
    /**
     * Requests to this endpoint will return the attributes of the specified partner-managed `transaction`.
     * @summary Read managed transaction
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readManagedTransaction(memberGuid: string, userGuid: string, transactionGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionResponseBody>>;
    /**
     * Use this endpoint to read the attributes of a specific member.
     * @summary Read member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMember(memberGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MemberResponseBody>>;
    /**
     * This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
     * @summary Read member status
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMemberStatus(memberGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MemberStatusResponseBody>>;
    /**
     * Returns information about a particular merchant, such as a logo, name, and website.
     * @summary Read merchant
     * @param {string} merchantGuid The unique id for a &#x60;merchant&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMerchant(merchantGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MerchantResponseBody>>;
    /**
     * This endpoint returns the specified merchant_location resource.
     * @summary Read merchant location
     * @param {string} merchantLocationGuid The unique id for a &#x60;merchant_location&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMerchantLocation(merchantLocationGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MerchantLocationResponseBody>>;
    /**
     * Use this endpoint to read a JSON representation of the statement.
     * @summary Read statement by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} statementGuid The unique id for a &#x60;statement&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readStatementByMember(memberGuid: string, statementGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StatementResponseBody>>;
    /**
     * Use this endpoint to read the attributes of a particular tag according to its unique GUID.
     * @summary Read tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readTag(tagGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TagResponseBody>>;
    /**
     * Use this endpoint to read the attributes of a `tagging` according to its unique GUID.
     * @summary Read tagging
     * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readTagging(taggingGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TaggingResponseBody>>;
    /**
     * Requests to this endpoint will return the attributes of the specified `transaction`.
     * @summary Read transaction
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readTransaction(transactionGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionResponseBody>>;
    /**
     * Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
     * @summary Read transaction rule
     * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readTransactionRule(transactionRuleGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionRuleResponseBody>>;
    /**
     * Use this endpoint to read the attributes of a specific user.
     * @summary Read user
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUser(userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UserResponseBody>>;
    /**
     * This endpoint will return a URL for an embeddable version of MX Connect.
     * @summary Request connect widget url
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ConnectWidgetRequestBody} [connectWidgetRequestBody] Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestConnectWidgetURL(userGuid: string, connectWidgetRequestBody?: ConnectWidgetRequestBody | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ConnectWidgetResponseBody>>;
    /**
     * This endpoint will generate an `oauth_window_uri` for the specified `member`.
     * @summary Request oauth window uri
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [referralSource] Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;.
     * @param {string} [uiMessageWebviewUrlScheme] A scheme for routing the user back to the application state they were previously in.
     * @param {boolean} [skipAggregation] Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestOAuthWindowURI(memberGuid: string, userGuid: string, referralSource?: string | undefined, uiMessageWebviewUrlScheme?: string | undefined, skipAggregation?: boolean | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<OAuthWindowResponseBody>>;
    /**
     * This endpoint allows partners to get a URL by passing the `widget_type` in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the `widget_type` to `connect_widget`. Partners may also pass an optional `Accept-Language` header as well as a number of configuration options. Note that this is a `POST` request.
     * @summary Request widget url
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {WidgetRequestBody} widgetRequestBody The widget url configuration options.
     * @param {string} [acceptLanguage] The desired language of the widget.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestWidgetURL(userGuid: string, widgetRequestBody: WidgetRequestBody, acceptLanguage?: string | undefined, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<WidgetResponseBody>>;
    /**
     * This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
     * @summary Resume aggregation
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {MemberResumeRequestBody} memberResumeRequestBody Member object with MFA challenge answers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resumeAggregation(memberGuid: string, userGuid: string, memberResumeRequestBody: MemberResumeRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MemberResponseBody>>;
    /**
     * This endpoint allows you to update certain attributes of an `account` resource.
     * @summary Update account by member
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {AccountUpdateRequestBody} accountUpdateRequestBody Account object to be created with optional parameters (is_hidden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccountByMember(userGuid: string, memberGuid: string, accountGuid: string, accountUpdateRequestBody: AccountUpdateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AccountResponseBody>>;
    /**
     * Use this endpoint to update the attributes of a custom category according to its unique GUID.
     * @summary Update category
     * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {CategoryUpdateRequestBody} categoryUpdateRequestBody Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategory(categoryGuid: string, userGuid: string, categoryUpdateRequestBody: CategoryUpdateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<CategoryResponseBody>>;
    /**
     * Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
     * @summary Update managed account
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {ManagedAccountUpdateRequestBody} managedAccountUpdateRequestBody Managed account object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateManagedAccount(memberGuid: string, userGuid: string, accountGuid: string, managedAccountUpdateRequestBody: ManagedAccountUpdateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<AccountResponseBody>>;
    /**
     * Use this endpoint to update the attributes of the specified partner_managed `member`.
     * @summary Update managed member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ManagedMemberUpdateRequestBody} managedMemberUpdateRequestBody Managed member object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateManagedMember(memberGuid: string, userGuid: string, managedMemberUpdateRequestBody: ManagedMemberUpdateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MemberResponseBody>>;
    /**
     * Use this endpoint to update the attributes of the specified partner_managed `transaction`.
     * @summary Update managed transaction
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {ManagedTransactionUpdateRequestBody} managedTransactionUpdateRequestBody Managed transaction object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateManagedTransaction(memberGuid: string, userGuid: string, transactionGuid: string, managedTransactionUpdateRequestBody: ManagedTransactionUpdateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionResponseBody>>;
    /**
     * Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
     * @summary Update member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {MemberUpdateRequestBody} memberUpdateRequestBody Member object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMember(memberGuid: string, userGuid: string, memberUpdateRequestBody: MemberUpdateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MemberResponseBody>>;
    /**
     * Use this endpoint to update the name of a specific tag according to its unique GUID.
     * @summary Update tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TagUpdateRequestBody} tagUpdateRequestBody Tag object to be updated with required parameter (tag_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTag(tagGuid: string, userGuid: string, tagUpdateRequestBody: TagUpdateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TagResponseBody>>;
    /**
     * Use this endpoint to update a tagging.
     * @summary Update tagging
     * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TaggingUpdateRequestBody} taggingUpdateRequestBody Tagging object to be updated with required parameter (tag_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTagging(taggingGuid: string, userGuid: string, taggingUpdateRequestBody: TaggingUpdateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TaggingResponseBody>>;
    /**
     * Use this endpoint to update the `description` of a specific transaction according to its unique GUID.
     * @summary Update transaction
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TransactionUpdateRequestBody} transactionUpdateRequestBody Transaction object to be updated with a new description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTransaction(transactionGuid: string, userGuid: string, transactionUpdateRequestBody: TransactionUpdateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionResponseBody>>;
    /**
     * Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
     * @summary Update transaction_rule
     * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TransactionRuleUpdateRequestBody} transactionRuleUpdateRequestBody TransactionRule object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTransactionRule(transactionRuleGuid: string, userGuid: string, transactionRuleUpdateRequestBody: TransactionRuleUpdateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TransactionRuleResponseBody>>;
    /**
     * Use this endpoint to update the attributes of a specific user. The MX Platform API will respond with the updated user object. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that users data until they are no longer disabled. Users who are disabled for the entirety of an MX Platform API billing period will not be factored into that months bill. To disable a user, update it and set the is_disabled parameter to true. Set it to false to re-enable the user.
     * @summary Update user
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {UserUpdateRequestBody} userUpdateRequestBody User object to be updated (None of these parameters are required, but the user object cannot be empty.)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(userGuid: string, userUpdateRequestBody: UserUpdateRequestBody, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UserResponseBody>>;
    /**
     * The verify endpoint begins a verification process for a member.
     * @summary Verify member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyMember(memberGuid: string, userGuid: string, options?: AxiosRequestConfig | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<MemberResponseBody>>;
};
/**
 * MxPlatformApi - factory interface
 * @export
 */
export declare const MxPlatformApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
     * @summary Aggregate member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateMember(memberGuid: string, userGuid: string, options?: any): AxiosPromise<MemberResponseBody>;
    /**
     * This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
     * @summary Check balances
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkBalances(memberGuid: string, userGuid: string, options?: any): AxiosPromise<MemberResponseBody>;
    /**
     * Use this endpoint to create a new custom category for a specific `user`.
     * @summary Create category
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {CategoryCreateRequestBody} categoryCreateRequestBody Custom category object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCategory(userGuid: string, categoryCreateRequestBody: CategoryCreateRequestBody, options?: any): AxiosPromise<CategoryResponseBody>;
    /**
     * Use this endpoint to create a partner-managed account.
     * @summary Create managed account
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {ManagedAccountCreateRequestBody} managedAccountCreateRequestBody Managed account to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManagedAccount(userGuid: string, memberGuid: string, managedAccountCreateRequestBody: ManagedAccountCreateRequestBody, options?: any): AxiosPromise<AccountResponseBody>;
    /**
     * Use this endpoint to create a new partner-managed `member`.
     * @summary Create managed member
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ManagedMemberCreateRequestBody} managedMemberCreateRequestBody Managed member to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManagedMember(userGuid: string, managedMemberCreateRequestBody: ManagedMemberCreateRequestBody, options?: any): AxiosPromise<MemberResponseBody>;
    /**
     * Use this endpoint to create a new partner-managed `transaction`.
     * @summary Create managed transaction
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {ManagedTransactionCreateRequestBody} managedTransactionCreateRequestBody Managed transaction to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManagedTransaction(userGuid: string, memberGuid: string, managedTransactionCreateRequestBody: ManagedTransactionCreateRequestBody, options?: any): AxiosPromise<TransactionResponseBody>;
    /**
     * This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the `/institutions/{institution_code}/credentials` endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
     * @summary Create member
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {MemberCreateRequestBody} memberCreateRequestBody Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMember(userGuid: string, memberCreateRequestBody: MemberCreateRequestBody, options?: any): AxiosPromise<MemberResponseBody>;
    /**
     * Use this endpoint to create a new custom tag.
     * @summary Create tag
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TagCreateRequestBody} tagCreateRequestBody Tag object to be created with required parameters (tag_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTag(userGuid: string, tagCreateRequestBody: TagCreateRequestBody, options?: any): AxiosPromise<TagResponseBody>;
    /**
     * Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
     * @summary Create tagging
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TaggingCreateRequestBody} taggingCreateRequestBody Tagging object to be created with required parameters (tag_guid and transaction_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTagging(userGuid: string, taggingCreateRequestBody: TaggingCreateRequestBody, options?: any): AxiosPromise<TaggingResponseBody>;
    /**
     * Use this endpoint to create a new transaction rule. The newly-created `transaction_rule` object will be returned if successful.
     * @summary Create transaction rule
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TransactionRuleCreateRequestBody} transactionRuleCreateRequestBody TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionRule(userGuid: string, transactionRuleCreateRequestBody: TransactionRuleCreateRequestBody, options?: any): AxiosPromise<TransactionRuleResponseBody>;
    /**
     * Call this endpoint to create a new user. The MX Platform API will respond with the newly-created user object if successful. This endpoint accepts several parameters - id, metadata, and is_disabled. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that users data until they are no longer disabled. Users who are disabled for the entirety of an MX Platform API billing period will not be factored into that months bill.
     * @summary Create user
     * @param {UserCreateRequestBody} userCreateRequestBody User object to be created. (None of these parameters are required, but the user object cannot be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(userCreateRequestBody: UserCreateRequestBody, options?: any): AxiosPromise<UserResponseBody>;
    /**
     * Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of `204 No Content`.
     * @summary Delete category
     * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategory(categoryGuid: string, userGuid: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of `204 No Content`.
     * @summary Delete managed account
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagedAccount(memberGuid: string, userGuid: string, accountGuid: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to delete the specified partner-managed `member`. The endpoint will respond with a status of `204 No Content` without a resource.
     * @summary Delete managed member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagedMember(memberGuid: string, userGuid: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to delete the specified partner-managed `transaction`. The endpoint will respond with a status of `204 No Content` without a resource.
     * @summary Delete managed transaction
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagedTransaction(memberGuid: string, userGuid: string, transactionGuid: string, options?: any): AxiosPromise<void>;
    /**
     * Accessing this endpoint will permanently delete a member.
     * @summary Delete member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMember(memberGuid: string, userGuid: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of `204 No Content`.
     * @summary Delete tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTag(tagGuid: string, userGuid: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
     * @summary Delete tagging
     * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTagging(taggingGuid: string, userGuid: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to permanently delete a transaction rule based on its unique GUID.
     * @summary Delete transaction rule
     * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransactionRule(transactionRuleGuid: string, userGuid: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to delete the specified `user`. The response will have a status of `204 No Content` without an object.
     * @summary Delete user
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(userGuid: string, options?: any): AxiosPromise<void>;
    /**
     * Use this endpoint to download a specified statement PDF.
     * @summary Download statement pdf
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} statementGuid The unique id for a &#x60;statement&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadStatementPDF(memberGuid: string, statementGuid: string, userGuid: string, options?: any): AxiosPromise<any>;
    /**
     * Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
     * @summary Enhance transactions
     * @param {EnhanceTransactionsRequestBody} enhanceTransactionsRequestBody Transaction object to be enhanced
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enhanceTransactions(enhanceTransactionsRequestBody: EnhanceTransactionsRequestBody, options?: any): AxiosPromise<EnhanceTransactionsResponseBody>;
    /**
     * Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
     * @summary Extend history
     * @param {string} memberGuid The unique identifier for a &#x60;member&#x60;.
     * @param {string} userGuid The unique identifier for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    extendHistory(memberGuid: string, userGuid: string, options?: any): AxiosPromise<MemberResponseBody>;
    /**
     * Use this endpoint to fetch the statements associated with a particular member.
     * @summary Fetch statements
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchStatements(memberGuid: string, userGuid: string, options?: any): AxiosPromise<MemberResponseBody>;
    /**
     * The identify endpoint begins an identification process for an already-existing member.
     * @summary Identify member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifyMember(memberGuid: string, userGuid: string, options?: any): AxiosPromise<MemberResponseBody>;
    /**
     * This endpoint returns a list of account numbers associated with the specified `account`.
     * @summary List account numbers by account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccountNumbersByAccount(accountGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<AccountNumbersResponseBody>;
    /**
     * This endpoint returns a list of account numbers associated with the specified `member`.
     * @summary List account numbers by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccountNumbersByMember(memberGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<AccountNumbersResponseBody>;
    /**
     * This endpoint returns an array with information about every account associated with a particular member.
     * @summary List account owners by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAccountOwnersByMember(memberGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<AccountOwnersResponseBody>;
    /**
     * Use this endpoint to list all categories associated with a `user`, including both default and custom categories.
     * @summary List categories
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCategories(userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<CategoriesResponseBody>;
    /**
     * Use this endpoint to read the attributes of a specific user.
     * @summary List default categories
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listDefaultCategories(userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<CategoriesResponseBody>;
    /**
     * This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
     * @summary List favorite institutions
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFavoriteInstitutions(page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<InstitutionsResponseBody>;
    /**
     * This endpoint returns all holdings associated with the specified `user` across all accounts and members.
     * @summary List holdings
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter holdings from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter holdings to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHoldings(userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: any): AxiosPromise<HoldingsResponseBody>;
    /**
     * This endpoint returns all holdings associated with the specified `member` across all accounts.
     * @summary List holdings by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter holdings from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter holdings to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHoldingsByMember(memberGuid: string, userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: any): AxiosPromise<HoldingsResponseBody>;
    /**
     * Use this endpoint to see which credentials will be needed to create a member for a specific institution.
     * @summary List institution credentials
     * @param {string} institutionCode The institution_code of the institution.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInstitutionCredentials(institutionCode: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<CredentialsResponseBody>;
    /**
     * This endpoint returns a list of institutions based on the specified search term or parameter.
     * @summary List institutions
     * @param {string} [name] This will list only institutions in which the appended string appears.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {boolean} [supportsAccountIdentification] Filter only institutions which support account identification.
     * @param {boolean} [supportsAccountStatement] Filter only institutions which support account statements.
     * @param {boolean} [supportsAccountVerification] Filter only institutions which support account verification.
     * @param {boolean} [supportsTransactionHistory] Filter only institutions which support extended transaction history.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInstitutions(name?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, supportsAccountIdentification?: boolean | undefined, supportsAccountStatement?: boolean | undefined, supportsAccountVerification?: boolean | undefined, supportsTransactionHistory?: boolean | undefined, options?: any): AxiosPromise<InstitutionsResponseBody>;
    /**
     * Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
     * @summary List managed accounts
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listManagedAccounts(userGuid: string, memberGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<AccountsResponseBody>;
    /**
     * This endpoint returns a list of institutions which can be used to create partner-managed members.
     * @summary List managed institutions
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listManagedInstitutions(page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<InstitutionsResponseBody>;
    /**
     * This endpoint returns a list of all the partner-managed members associated with the specified `user`.
     * @summary List managed members
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listManagedMembers(userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<MembersResponseBody>;
    /**
     * This endpoint returns a list of all the partner-managed transactions associated with the specified `account`, scoped through a `user` and a `member`.
     * @summary List managed transactions
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listManagedTransactions(userGuid: string, memberGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<TransactionsResponseBody>;
    /**
     * Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of `CHALLENGED`, then code `204 No Content` will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of `CHALLENGED`, then code `200 OK` will be returned - along with the corresponding credentials.
     * @summary List member challenges
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMemberChallenges(memberGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<ChallengesResponseBody>;
    /**
     * This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
     * @summary List member credentials
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMemberCredentials(memberGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<CredentialsResponseBody>;
    /**
     * This endpoint returns an array which contains information on every member associated with a specific user.
     * @summary List members
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMembers(userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<MembersResponseBody>;
    /**
     * This endpoint returns a paginated list of all the merchants in the MX system.
     * @summary List merchants
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMerchants(page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<MerchantsResponseBody>;
    /**
     * Use this endpoint to get an array of available statements.
     * @summary List statements by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStatementsByMember(memberGuid: string, userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<StatementsResponseBody>;
    /**
     * Use this endpoint to retrieve a list of all the taggings associated with a specific user.
     * @summary List taggings
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTaggings(userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<TaggingsResponseBody>;
    /**
     * Use this endpoint to list all tags associated with the specified `user`. Each user includes the `Business` tag by default.
     * @summary List tags
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTags(userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<TagsResponseBody>;
    /**
     * Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
     * @summary List transaction rules
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactionRules(userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<TransactionRulesResponseBody>;
    /**
     * Requests to this endpoint return a list of transactions associated with the specified `user`, accross all members and accounts associated with that `user`.
     * @summary List transactions
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions(userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: any): AxiosPromise<TransactionsResponseBody>;
    /**
     * This endpoint returns a list of the last 90 days of transactions associated with the specified account.
     * @summary List transactions by account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactionsByAccount(accountGuid: string, userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: any): AxiosPromise<TransactionsResponseBody>;
    /**
     * Requests to this endpoint return a list of transactions associated with the specified `member`, accross all accounts associated with that `member`.
     * @summary List transactions by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactionsByMember(memberGuid: string, userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: any): AxiosPromise<TransactionsResponseBody>;
    /**
     * Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
     * @summary List transactions by tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactionsByTag(tagGuid: string, userGuid: string, fromDate?: string | undefined, page?: number | undefined, recordsPerPage?: number | undefined, toDate?: string | undefined, options?: any): AxiosPromise<TransactionsResponseBody>;
    /**
     * This endpoint returns a list of all the accounts associated with the specified `user`.
     * @summary List accounts
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserAccounts(userGuid: string, page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<AccountsResponseBody>;
    /**
     * Use this endpoint to list every user you\'ve created in the MX Platform API.
     * @summary List users
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(page?: number | undefined, recordsPerPage?: number | undefined, options?: any): AxiosPromise<UsersResponseBody>;
    /**
     * This endpoint returns the specified `account` resource.
     * @summary Read account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAccount(accountGuid: string, userGuid: string, options?: any): AxiosPromise<AccountResponseBody>;
    /**
     * Use this endpoint to read the attributes of either a default category or a custom category.
     * @summary Read category
     * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readCategory(categoryGuid: string, userGuid: string, options?: any): AxiosPromise<CategoryResponseBody>;
    /**
     * Use this endpoint to read the attributes of a specific `holding`.
     * @summary Read holding
     * @param {string} holdingGuid The unique id for a &#x60;holding&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readHolding(holdingGuid: string, userGuid: string, options?: any): AxiosPromise<HoldingResponseBody>;
    /**
     * This endpoint returns information about the institution specified by `institution_code`.
     * @summary Read institution
     * @param {string} institutionCode The institution_code of the institution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readInstitution(institutionCode: string, options?: any): AxiosPromise<InstitutionResponseBody>;
    /**
     * Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
     * @summary Read managed account
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readManagedAccount(memberGuid: string, userGuid: string, accountGuid: string, options?: any): AxiosPromise<AccountResponseBody>;
    /**
     * This endpoint returns the attributes of the specified partner-managed `member`.
     * @summary Read managed member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readManagedMember(memberGuid: string, userGuid: string, options?: any): AxiosPromise<MemberResponseBody>;
    /**
     * Requests to this endpoint will return the attributes of the specified partner-managed `transaction`.
     * @summary Read managed transaction
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readManagedTransaction(memberGuid: string, userGuid: string, transactionGuid: string, options?: any): AxiosPromise<TransactionResponseBody>;
    /**
     * Use this endpoint to read the attributes of a specific member.
     * @summary Read member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMember(memberGuid: string, userGuid: string, options?: any): AxiosPromise<MemberResponseBody>;
    /**
     * This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
     * @summary Read member status
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMemberStatus(memberGuid: string, userGuid: string, options?: any): AxiosPromise<MemberStatusResponseBody>;
    /**
     * Returns information about a particular merchant, such as a logo, name, and website.
     * @summary Read merchant
     * @param {string} merchantGuid The unique id for a &#x60;merchant&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMerchant(merchantGuid: string, options?: any): AxiosPromise<MerchantResponseBody>;
    /**
     * This endpoint returns the specified merchant_location resource.
     * @summary Read merchant location
     * @param {string} merchantLocationGuid The unique id for a &#x60;merchant_location&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMerchantLocation(merchantLocationGuid: string, options?: any): AxiosPromise<MerchantLocationResponseBody>;
    /**
     * Use this endpoint to read a JSON representation of the statement.
     * @summary Read statement by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} statementGuid The unique id for a &#x60;statement&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readStatementByMember(memberGuid: string, statementGuid: string, userGuid: string, options?: any): AxiosPromise<StatementResponseBody>;
    /**
     * Use this endpoint to read the attributes of a particular tag according to its unique GUID.
     * @summary Read tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readTag(tagGuid: string, userGuid: string, options?: any): AxiosPromise<TagResponseBody>;
    /**
     * Use this endpoint to read the attributes of a `tagging` according to its unique GUID.
     * @summary Read tagging
     * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readTagging(taggingGuid: string, userGuid: string, options?: any): AxiosPromise<TaggingResponseBody>;
    /**
     * Requests to this endpoint will return the attributes of the specified `transaction`.
     * @summary Read transaction
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readTransaction(transactionGuid: string, userGuid: string, options?: any): AxiosPromise<TransactionResponseBody>;
    /**
     * Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
     * @summary Read transaction rule
     * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readTransactionRule(transactionRuleGuid: string, userGuid: string, options?: any): AxiosPromise<TransactionRuleResponseBody>;
    /**
     * Use this endpoint to read the attributes of a specific user.
     * @summary Read user
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readUser(userGuid: string, options?: any): AxiosPromise<UserResponseBody>;
    /**
     * This endpoint will return a URL for an embeddable version of MX Connect.
     * @summary Request connect widget url
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ConnectWidgetRequestBody} [connectWidgetRequestBody] Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestConnectWidgetURL(userGuid: string, connectWidgetRequestBody?: ConnectWidgetRequestBody | undefined, options?: any): AxiosPromise<ConnectWidgetResponseBody>;
    /**
     * This endpoint will generate an `oauth_window_uri` for the specified `member`.
     * @summary Request oauth window uri
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [referralSource] Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;.
     * @param {string} [uiMessageWebviewUrlScheme] A scheme for routing the user back to the application state they were previously in.
     * @param {boolean} [skipAggregation] Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestOAuthWindowURI(memberGuid: string, userGuid: string, referralSource?: string | undefined, uiMessageWebviewUrlScheme?: string | undefined, skipAggregation?: boolean | undefined, options?: any): AxiosPromise<OAuthWindowResponseBody>;
    /**
     * This endpoint allows partners to get a URL by passing the `widget_type` in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the `widget_type` to `connect_widget`. Partners may also pass an optional `Accept-Language` header as well as a number of configuration options. Note that this is a `POST` request.
     * @summary Request widget url
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {WidgetRequestBody} widgetRequestBody The widget url configuration options.
     * @param {string} [acceptLanguage] The desired language of the widget.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestWidgetURL(userGuid: string, widgetRequestBody: WidgetRequestBody, acceptLanguage?: string | undefined, options?: any): AxiosPromise<WidgetResponseBody>;
    /**
     * This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
     * @summary Resume aggregation
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {MemberResumeRequestBody} memberResumeRequestBody Member object with MFA challenge answers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resumeAggregation(memberGuid: string, userGuid: string, memberResumeRequestBody: MemberResumeRequestBody, options?: any): AxiosPromise<MemberResponseBody>;
    /**
     * This endpoint allows you to update certain attributes of an `account` resource.
     * @summary Update account by member
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {AccountUpdateRequestBody} accountUpdateRequestBody Account object to be created with optional parameters (is_hidden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccountByMember(userGuid: string, memberGuid: string, accountGuid: string, accountUpdateRequestBody: AccountUpdateRequestBody, options?: any): AxiosPromise<AccountResponseBody>;
    /**
     * Use this endpoint to update the attributes of a custom category according to its unique GUID.
     * @summary Update category
     * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {CategoryUpdateRequestBody} categoryUpdateRequestBody Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCategory(categoryGuid: string, userGuid: string, categoryUpdateRequestBody: CategoryUpdateRequestBody, options?: any): AxiosPromise<CategoryResponseBody>;
    /**
     * Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
     * @summary Update managed account
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {ManagedAccountUpdateRequestBody} managedAccountUpdateRequestBody Managed account object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateManagedAccount(memberGuid: string, userGuid: string, accountGuid: string, managedAccountUpdateRequestBody: ManagedAccountUpdateRequestBody, options?: any): AxiosPromise<AccountResponseBody>;
    /**
     * Use this endpoint to update the attributes of the specified partner_managed `member`.
     * @summary Update managed member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ManagedMemberUpdateRequestBody} managedMemberUpdateRequestBody Managed member object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateManagedMember(memberGuid: string, userGuid: string, managedMemberUpdateRequestBody: ManagedMemberUpdateRequestBody, options?: any): AxiosPromise<MemberResponseBody>;
    /**
     * Use this endpoint to update the attributes of the specified partner_managed `transaction`.
     * @summary Update managed transaction
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {ManagedTransactionUpdateRequestBody} managedTransactionUpdateRequestBody Managed transaction object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateManagedTransaction(memberGuid: string, userGuid: string, transactionGuid: string, managedTransactionUpdateRequestBody: ManagedTransactionUpdateRequestBody, options?: any): AxiosPromise<TransactionResponseBody>;
    /**
     * Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
     * @summary Update member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {MemberUpdateRequestBody} memberUpdateRequestBody Member object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMember(memberGuid: string, userGuid: string, memberUpdateRequestBody: MemberUpdateRequestBody, options?: any): AxiosPromise<MemberResponseBody>;
    /**
     * Use this endpoint to update the name of a specific tag according to its unique GUID.
     * @summary Update tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TagUpdateRequestBody} tagUpdateRequestBody Tag object to be updated with required parameter (tag_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTag(tagGuid: string, userGuid: string, tagUpdateRequestBody: TagUpdateRequestBody, options?: any): AxiosPromise<TagResponseBody>;
    /**
     * Use this endpoint to update a tagging.
     * @summary Update tagging
     * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TaggingUpdateRequestBody} taggingUpdateRequestBody Tagging object to be updated with required parameter (tag_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTagging(taggingGuid: string, userGuid: string, taggingUpdateRequestBody: TaggingUpdateRequestBody, options?: any): AxiosPromise<TaggingResponseBody>;
    /**
     * Use this endpoint to update the `description` of a specific transaction according to its unique GUID.
     * @summary Update transaction
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TransactionUpdateRequestBody} transactionUpdateRequestBody Transaction object to be updated with a new description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTransaction(transactionGuid: string, userGuid: string, transactionUpdateRequestBody: TransactionUpdateRequestBody, options?: any): AxiosPromise<TransactionResponseBody>;
    /**
     * Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
     * @summary Update transaction_rule
     * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TransactionRuleUpdateRequestBody} transactionRuleUpdateRequestBody TransactionRule object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTransactionRule(transactionRuleGuid: string, userGuid: string, transactionRuleUpdateRequestBody: TransactionRuleUpdateRequestBody, options?: any): AxiosPromise<TransactionRuleResponseBody>;
    /**
     * Use this endpoint to update the attributes of a specific user. The MX Platform API will respond with the updated user object. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that users data until they are no longer disabled. Users who are disabled for the entirety of an MX Platform API billing period will not be factored into that months bill. To disable a user, update it and set the is_disabled parameter to true. Set it to false to re-enable the user.
     * @summary Update user
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {UserUpdateRequestBody} userUpdateRequestBody User object to be updated (None of these parameters are required, but the user object cannot be empty.)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(userGuid: string, userUpdateRequestBody: UserUpdateRequestBody, options?: any): AxiosPromise<UserResponseBody>;
    /**
     * The verify endpoint begins a verification process for a member.
     * @summary Verify member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyMember(memberGuid: string, userGuid: string, options?: any): AxiosPromise<MemberResponseBody>;
};
/**
 * MxPlatformApi - object-oriented interface
 * @export
 * @class MxPlatformApi
 * @extends {BaseAPI}
 */
export declare class MxPlatformApi extends BaseAPI {
    /**
     * Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.
     * @summary Aggregate member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    aggregateMember(memberGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MemberResponseBody>>;
    /**
     * This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.
     * @summary Check balances
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    checkBalances(memberGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MemberResponseBody>>;
    /**
     * Use this endpoint to create a new custom category for a specific `user`.
     * @summary Create category
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {CategoryCreateRequestBody} categoryCreateRequestBody Custom category object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createCategory(userGuid: string, categoryCreateRequestBody: CategoryCreateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CategoryResponseBody>>;
    /**
     * Use this endpoint to create a partner-managed account.
     * @summary Create managed account
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {ManagedAccountCreateRequestBody} managedAccountCreateRequestBody Managed account to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createManagedAccount(userGuid: string, memberGuid: string, managedAccountCreateRequestBody: ManagedAccountCreateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountResponseBody>>;
    /**
     * Use this endpoint to create a new partner-managed `member`.
     * @summary Create managed member
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ManagedMemberCreateRequestBody} managedMemberCreateRequestBody Managed member to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createManagedMember(userGuid: string, managedMemberCreateRequestBody: ManagedMemberCreateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MemberResponseBody>>;
    /**
     * Use this endpoint to create a new partner-managed `transaction`.
     * @summary Create managed transaction
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {ManagedTransactionCreateRequestBody} managedTransactionCreateRequestBody Managed transaction to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createManagedTransaction(userGuid: string, memberGuid: string, managedTransactionCreateRequestBody: ManagedTransactionCreateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionResponseBody>>;
    /**
     * This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the `/institutions/{institution_code}/credentials` endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.
     * @summary Create member
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {MemberCreateRequestBody} memberCreateRequestBody Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createMember(userGuid: string, memberCreateRequestBody: MemberCreateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MemberResponseBody>>;
    /**
     * Use this endpoint to create a new custom tag.
     * @summary Create tag
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TagCreateRequestBody} tagCreateRequestBody Tag object to be created with required parameters (tag_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createTag(userGuid: string, tagCreateRequestBody: TagCreateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TagResponseBody>>;
    /**
     * Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.
     * @summary Create tagging
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TaggingCreateRequestBody} taggingCreateRequestBody Tagging object to be created with required parameters (tag_guid and transaction_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createTagging(userGuid: string, taggingCreateRequestBody: TaggingCreateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaggingResponseBody>>;
    /**
     * Use this endpoint to create a new transaction rule. The newly-created `transaction_rule` object will be returned if successful.
     * @summary Create transaction rule
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TransactionRuleCreateRequestBody} transactionRuleCreateRequestBody TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createTransactionRule(userGuid: string, transactionRuleCreateRequestBody: TransactionRuleCreateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionRuleResponseBody>>;
    /**
     * Call this endpoint to create a new user. The MX Platform API will respond with the newly-created user object if successful. This endpoint accepts several parameters - id, metadata, and is_disabled. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that users data until they are no longer disabled. Users who are disabled for the entirety of an MX Platform API billing period will not be factored into that months bill.
     * @summary Create user
     * @param {UserCreateRequestBody} userCreateRequestBody User object to be created. (None of these parameters are required, but the user object cannot be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    createUser(userCreateRequestBody: UserCreateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserResponseBody>>;
    /**
     * Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of `204 No Content`.
     * @summary Delete category
     * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteCategory(categoryGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of `204 No Content`.
     * @summary Delete managed account
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteManagedAccount(memberGuid: string, userGuid: string, accountGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to delete the specified partner-managed `member`. The endpoint will respond with a status of `204 No Content` without a resource.
     * @summary Delete managed member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteManagedMember(memberGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to delete the specified partner-managed `transaction`. The endpoint will respond with a status of `204 No Content` without a resource.
     * @summary Delete managed transaction
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteManagedTransaction(memberGuid: string, userGuid: string, transactionGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Accessing this endpoint will permanently delete a member.
     * @summary Delete member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteMember(memberGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of `204 No Content`.
     * @summary Delete tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteTag(tagGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.
     * @summary Delete tagging
     * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteTagging(taggingGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to permanently delete a transaction rule based on its unique GUID.
     * @summary Delete transaction rule
     * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteTransactionRule(transactionRuleGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to delete the specified `user`. The response will have a status of `204 No Content` without an object.
     * @summary Delete user
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    deleteUser(userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void>>;
    /**
     * Use this endpoint to download a specified statement PDF.
     * @summary Download statement pdf
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} statementGuid The unique id for a &#x60;statement&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    downloadStatementPDF(memberGuid: string, statementGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any>>;
    /**
     * Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.
     * @summary Enhance transactions
     * @param {EnhanceTransactionsRequestBody} enhanceTransactionsRequestBody Transaction object to be enhanced
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    enhanceTransactions(enhanceTransactionsRequestBody: EnhanceTransactionsRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EnhanceTransactionsResponseBody>>;
    /**
     * Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.
     * @summary Extend history
     * @param {string} memberGuid The unique identifier for a &#x60;member&#x60;.
     * @param {string} userGuid The unique identifier for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    extendHistory(memberGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MemberResponseBody>>;
    /**
     * Use this endpoint to fetch the statements associated with a particular member.
     * @summary Fetch statements
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    fetchStatements(memberGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MemberResponseBody>>;
    /**
     * The identify endpoint begins an identification process for an already-existing member.
     * @summary Identify member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    identifyMember(memberGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MemberResponseBody>>;
    /**
     * This endpoint returns a list of account numbers associated with the specified `account`.
     * @summary List account numbers by account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listAccountNumbersByAccount(accountGuid: string, userGuid: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountNumbersResponseBody>>;
    /**
     * This endpoint returns a list of account numbers associated with the specified `member`.
     * @summary List account numbers by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listAccountNumbersByMember(memberGuid: string, userGuid: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountNumbersResponseBody>>;
    /**
     * This endpoint returns an array with information about every account associated with a particular member.
     * @summary List account owners by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listAccountOwnersByMember(memberGuid: string, userGuid: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountOwnersResponseBody>>;
    /**
     * Use this endpoint to list all categories associated with a `user`, including both default and custom categories.
     * @summary List categories
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listCategories(userGuid: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CategoriesResponseBody>>;
    /**
     * Use this endpoint to read the attributes of a specific user.
     * @summary List default categories
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listDefaultCategories(userGuid: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CategoriesResponseBody>>;
    /**
     * This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.
     * @summary List favorite institutions
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listFavoriteInstitutions(page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InstitutionsResponseBody>>;
    /**
     * This endpoint returns all holdings associated with the specified `user` across all accounts and members.
     * @summary List holdings
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter holdings from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter holdings to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listHoldings(userGuid: string, fromDate?: string, page?: number, recordsPerPage?: number, toDate?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HoldingsResponseBody>>;
    /**
     * This endpoint returns all holdings associated with the specified `member` across all accounts.
     * @summary List holdings by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter holdings from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter holdings to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listHoldingsByMember(memberGuid: string, userGuid: string, fromDate?: string, page?: number, recordsPerPage?: number, toDate?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HoldingsResponseBody>>;
    /**
     * Use this endpoint to see which credentials will be needed to create a member for a specific institution.
     * @summary List institution credentials
     * @param {string} institutionCode The institution_code of the institution.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listInstitutionCredentials(institutionCode: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CredentialsResponseBody>>;
    /**
     * This endpoint returns a list of institutions based on the specified search term or parameter.
     * @summary List institutions
     * @param {string} [name] This will list only institutions in which the appended string appears.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {boolean} [supportsAccountIdentification] Filter only institutions which support account identification.
     * @param {boolean} [supportsAccountStatement] Filter only institutions which support account statements.
     * @param {boolean} [supportsAccountVerification] Filter only institutions which support account verification.
     * @param {boolean} [supportsTransactionHistory] Filter only institutions which support extended transaction history.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listInstitutions(name?: string, page?: number, recordsPerPage?: number, supportsAccountIdentification?: boolean, supportsAccountStatement?: boolean, supportsAccountVerification?: boolean, supportsTransactionHistory?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InstitutionsResponseBody>>;
    /**
     * Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.
     * @summary List managed accounts
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listManagedAccounts(userGuid: string, memberGuid: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountsResponseBody>>;
    /**
     * This endpoint returns a list of institutions which can be used to create partner-managed members.
     * @summary List managed institutions
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listManagedInstitutions(page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InstitutionsResponseBody>>;
    /**
     * This endpoint returns a list of all the partner-managed members associated with the specified `user`.
     * @summary List managed members
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listManagedMembers(userGuid: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MembersResponseBody>>;
    /**
     * This endpoint returns a list of all the partner-managed transactions associated with the specified `account`, scoped through a `user` and a `member`.
     * @summary List managed transactions
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listManagedTransactions(userGuid: string, memberGuid: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionsResponseBody>>;
    /**
     * Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of `CHALLENGED`, then code `204 No Content` will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of `CHALLENGED`, then code `200 OK` will be returned - along with the corresponding credentials.
     * @summary List member challenges
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listMemberChallenges(memberGuid: string, userGuid: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChallengesResponseBody>>;
    /**
     * This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.
     * @summary List member credentials
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listMemberCredentials(memberGuid: string, userGuid: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CredentialsResponseBody>>;
    /**
     * This endpoint returns an array which contains information on every member associated with a specific user.
     * @summary List members
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listMembers(userGuid: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MembersResponseBody>>;
    /**
     * This endpoint returns a paginated list of all the merchants in the MX system.
     * @summary List merchants
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listMerchants(page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MerchantsResponseBody>>;
    /**
     * Use this endpoint to get an array of available statements.
     * @summary List statements by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listStatementsByMember(memberGuid: string, userGuid: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StatementsResponseBody>>;
    /**
     * Use this endpoint to retrieve a list of all the taggings associated with a specific user.
     * @summary List taggings
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listTaggings(userGuid: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaggingsResponseBody>>;
    /**
     * Use this endpoint to list all tags associated with the specified `user`. Each user includes the `Business` tag by default.
     * @summary List tags
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listTags(userGuid: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TagsResponseBody>>;
    /**
     * Use this endpoint to read the attributes of all existing transaction rules belonging to the user.
     * @summary List transaction rules
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listTransactionRules(userGuid: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionRulesResponseBody>>;
    /**
     * Requests to this endpoint return a list of transactions associated with the specified `user`, accross all members and accounts associated with that `user`.
     * @summary List transactions
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listTransactions(userGuid: string, fromDate?: string, page?: number, recordsPerPage?: number, toDate?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionsResponseBody>>;
    /**
     * This endpoint returns a list of the last 90 days of transactions associated with the specified account.
     * @summary List transactions by account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listTransactionsByAccount(accountGuid: string, userGuid: string, fromDate?: string, page?: number, recordsPerPage?: number, toDate?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionsResponseBody>>;
    /**
     * Requests to this endpoint return a list of transactions associated with the specified `member`, accross all accounts associated with that `member`.
     * @summary List transactions by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listTransactionsByMember(memberGuid: string, userGuid: string, fromDate?: string, page?: number, recordsPerPage?: number, toDate?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionsResponseBody>>;
    /**
     * Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.
     * @summary List transactions by tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [fromDate] Filter transactions from this date.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {string} [toDate] Filter transactions to this date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listTransactionsByTag(tagGuid: string, userGuid: string, fromDate?: string, page?: number, recordsPerPage?: number, toDate?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionsResponseBody>>;
    /**
     * This endpoint returns a list of all the accounts associated with the specified `user`.
     * @summary List accounts
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listUserAccounts(userGuid: string, page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountsResponseBody>>;
    /**
     * Use this endpoint to list every user you\'ve created in the MX Platform API.
     * @summary List users
     * @param {number} [page] Specify current page.
     * @param {number} [recordsPerPage] Specify records per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    listUsers(page?: number, recordsPerPage?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersResponseBody>>;
    /**
     * This endpoint returns the specified `account` resource.
     * @summary Read account
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readAccount(accountGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountResponseBody>>;
    /**
     * Use this endpoint to read the attributes of either a default category or a custom category.
     * @summary Read category
     * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readCategory(categoryGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CategoryResponseBody>>;
    /**
     * Use this endpoint to read the attributes of a specific `holding`.
     * @summary Read holding
     * @param {string} holdingGuid The unique id for a &#x60;holding&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readHolding(holdingGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HoldingResponseBody>>;
    /**
     * This endpoint returns information about the institution specified by `institution_code`.
     * @summary Read institution
     * @param {string} institutionCode The institution_code of the institution.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readInstitution(institutionCode: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InstitutionResponseBody>>;
    /**
     * Use this endpoint to read the attributes of a partner-managed account according to its unique guid.
     * @summary Read managed account
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readManagedAccount(memberGuid: string, userGuid: string, accountGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountResponseBody>>;
    /**
     * This endpoint returns the attributes of the specified partner-managed `member`.
     * @summary Read managed member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readManagedMember(memberGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MemberResponseBody>>;
    /**
     * Requests to this endpoint will return the attributes of the specified partner-managed `transaction`.
     * @summary Read managed transaction
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readManagedTransaction(memberGuid: string, userGuid: string, transactionGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionResponseBody>>;
    /**
     * Use this endpoint to read the attributes of a specific member.
     * @summary Read member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readMember(memberGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MemberResponseBody>>;
    /**
     * This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.
     * @summary Read member status
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readMemberStatus(memberGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MemberStatusResponseBody>>;
    /**
     * Returns information about a particular merchant, such as a logo, name, and website.
     * @summary Read merchant
     * @param {string} merchantGuid The unique id for a &#x60;merchant&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readMerchant(merchantGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MerchantResponseBody>>;
    /**
     * This endpoint returns the specified merchant_location resource.
     * @summary Read merchant location
     * @param {string} merchantLocationGuid The unique id for a &#x60;merchant_location&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readMerchantLocation(merchantLocationGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MerchantLocationResponseBody>>;
    /**
     * Use this endpoint to read a JSON representation of the statement.
     * @summary Read statement by member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} statementGuid The unique id for a &#x60;statement&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readStatementByMember(memberGuid: string, statementGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StatementResponseBody>>;
    /**
     * Use this endpoint to read the attributes of a particular tag according to its unique GUID.
     * @summary Read tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readTag(tagGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TagResponseBody>>;
    /**
     * Use this endpoint to read the attributes of a `tagging` according to its unique GUID.
     * @summary Read tagging
     * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readTagging(taggingGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaggingResponseBody>>;
    /**
     * Requests to this endpoint will return the attributes of the specified `transaction`.
     * @summary Read transaction
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readTransaction(transactionGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionResponseBody>>;
    /**
     * Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.
     * @summary Read transaction rule
     * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readTransactionRule(transactionRuleGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionRuleResponseBody>>;
    /**
     * Use this endpoint to read the attributes of a specific user.
     * @summary Read user
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    readUser(userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserResponseBody>>;
    /**
     * This endpoint will return a URL for an embeddable version of MX Connect.
     * @summary Request connect widget url
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ConnectWidgetRequestBody} [connectWidgetRequestBody] Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    requestConnectWidgetURL(userGuid: string, connectWidgetRequestBody?: ConnectWidgetRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConnectWidgetResponseBody>>;
    /**
     * This endpoint will generate an `oauth_window_uri` for the specified `member`.
     * @summary Request oauth window uri
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} [referralSource] Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;.
     * @param {string} [uiMessageWebviewUrlScheme] A scheme for routing the user back to the application state they were previously in.
     * @param {boolean} [skipAggregation] Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    requestOAuthWindowURI(memberGuid: string, userGuid: string, referralSource?: string, uiMessageWebviewUrlScheme?: string, skipAggregation?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OAuthWindowResponseBody>>;
    /**
     * This endpoint allows partners to get a URL by passing the `widget_type` in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the `widget_type` to `connect_widget`. Partners may also pass an optional `Accept-Language` header as well as a number of configuration options. Note that this is a `POST` request.
     * @summary Request widget url
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {WidgetRequestBody} widgetRequestBody The widget url configuration options.
     * @param {string} [acceptLanguage] The desired language of the widget.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    requestWidgetURL(userGuid: string, widgetRequestBody: WidgetRequestBody, acceptLanguage?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WidgetResponseBody>>;
    /**
     * This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.
     * @summary Resume aggregation
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {MemberResumeRequestBody} memberResumeRequestBody Member object with MFA challenge answers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    resumeAggregation(memberGuid: string, userGuid: string, memberResumeRequestBody: MemberResumeRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MemberResponseBody>>;
    /**
     * This endpoint allows you to update certain attributes of an `account` resource.
     * @summary Update account by member
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {AccountUpdateRequestBody} accountUpdateRequestBody Account object to be created with optional parameters (is_hidden)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateAccountByMember(userGuid: string, memberGuid: string, accountGuid: string, accountUpdateRequestBody: AccountUpdateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountResponseBody>>;
    /**
     * Use this endpoint to update the attributes of a custom category according to its unique GUID.
     * @summary Update category
     * @param {string} categoryGuid The unique id for a &#x60;category&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {CategoryUpdateRequestBody} categoryUpdateRequestBody Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateCategory(categoryGuid: string, userGuid: string, categoryUpdateRequestBody: CategoryUpdateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CategoryResponseBody>>;
    /**
     * Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.
     * @summary Update managed account
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} accountGuid The unique id for an &#x60;account&#x60;.
     * @param {ManagedAccountUpdateRequestBody} managedAccountUpdateRequestBody Managed account object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateManagedAccount(memberGuid: string, userGuid: string, accountGuid: string, managedAccountUpdateRequestBody: ManagedAccountUpdateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountResponseBody>>;
    /**
     * Use this endpoint to update the attributes of the specified partner_managed `member`.
     * @summary Update managed member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {ManagedMemberUpdateRequestBody} managedMemberUpdateRequestBody Managed member object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateManagedMember(memberGuid: string, userGuid: string, managedMemberUpdateRequestBody: ManagedMemberUpdateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MemberResponseBody>>;
    /**
     * Use this endpoint to update the attributes of the specified partner_managed `transaction`.
     * @summary Update managed transaction
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {ManagedTransactionUpdateRequestBody} managedTransactionUpdateRequestBody Managed transaction object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateManagedTransaction(memberGuid: string, userGuid: string, transactionGuid: string, managedTransactionUpdateRequestBody: ManagedTransactionUpdateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionResponseBody>>;
    /**
     * Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.
     * @summary Update member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {MemberUpdateRequestBody} memberUpdateRequestBody Member object to be updated (While no single parameter is required, the request body can\&#39;t be empty)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateMember(memberGuid: string, userGuid: string, memberUpdateRequestBody: MemberUpdateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MemberResponseBody>>;
    /**
     * Use this endpoint to update the name of a specific tag according to its unique GUID.
     * @summary Update tag
     * @param {string} tagGuid The unique id for a &#x60;tag&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TagUpdateRequestBody} tagUpdateRequestBody Tag object to be updated with required parameter (tag_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateTag(tagGuid: string, userGuid: string, tagUpdateRequestBody: TagUpdateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TagResponseBody>>;
    /**
     * Use this endpoint to update a tagging.
     * @summary Update tagging
     * @param {string} taggingGuid The unique id for a &#x60;tagging&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TaggingUpdateRequestBody} taggingUpdateRequestBody Tagging object to be updated with required parameter (tag_guid)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateTagging(taggingGuid: string, userGuid: string, taggingUpdateRequestBody: TaggingUpdateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaggingResponseBody>>;
    /**
     * Use this endpoint to update the `description` of a specific transaction according to its unique GUID.
     * @summary Update transaction
     * @param {string} transactionGuid The unique id for a &#x60;transaction&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TransactionUpdateRequestBody} transactionUpdateRequestBody Transaction object to be updated with a new description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateTransaction(transactionGuid: string, userGuid: string, transactionUpdateRequestBody: TransactionUpdateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionResponseBody>>;
    /**
     * Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.
     * @summary Update transaction_rule
     * @param {string} transactionRuleGuid The unique id for a &#x60;transaction_rule&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {TransactionRuleUpdateRequestBody} transactionRuleUpdateRequestBody TransactionRule object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateTransactionRule(transactionRuleGuid: string, userGuid: string, transactionRuleUpdateRequestBody: TransactionRuleUpdateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransactionRuleResponseBody>>;
    /**
     * Use this endpoint to update the attributes of a specific user. The MX Platform API will respond with the updated user object. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that users data until they are no longer disabled. Users who are disabled for the entirety of an MX Platform API billing period will not be factored into that months bill. To disable a user, update it and set the is_disabled parameter to true. Set it to false to re-enable the user.
     * @summary Update user
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {UserUpdateRequestBody} userUpdateRequestBody User object to be updated (None of these parameters are required, but the user object cannot be empty.)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    updateUser(userGuid: string, userUpdateRequestBody: UserUpdateRequestBody, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserResponseBody>>;
    /**
     * The verify endpoint begins a verification process for a member.
     * @summary Verify member
     * @param {string} memberGuid The unique id for a &#x60;member&#x60;.
     * @param {string} userGuid The unique id for a &#x60;user&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MxPlatformApi
     */
    verifyMember(memberGuid: string, userGuid: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MemberResponseBody>>;
}
